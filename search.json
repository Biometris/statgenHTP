[{"path":"/articles/Overview_HTP.html","id":"the-statgenhtp-package","dir":"Articles","previous_headings":"","what":"The statgenHTP Package","title":"statgenHTP: A short overview","text":"statgenHTP package developed easy--use package analyzing data coming high throughput phenotyping (HTP) platform experiments. package provides many options plotting exporting results analyses. developed within EPPN2020project meet needs automated analyses HTP data. New phenotyping techniques enable measuring traits high throughput, traits measured multiple time points hundreds thousands plants. requires automatic modeling data (Tardieu et al. 2017) model robust, flexible easy selection steps. aim package provide suit functions (1) detect outliers time point plant levels, (2) accurately separate genetic effects spatial effects time point, (3) model temporal evolution genetic signal, (4) estimate relevant parameters modeled time course. provide user either genotypic values corrected values can used modeling, e.g. extract responses environment (Eeuwijk et al. 2019). Structure package overall structure package six main parts: Data description preparation - statgenHTP tutorial: 1. Introduction, data description preparation Outlier detection: single observations - statgenHTP tutorial: 2. Outlier detection single observations Correction spatial trends - statgenHTP tutorial: 3. Correction spatial trends Outlier detection: series observations - statgenHTP tutorial: 4. Outlier detection series observations Modeling genetic signal - statgenHTP tutorial: 5. Modelling temporal evolution genetic signal Parameter estimation - statgenHTP tutorial: 6. Estimation parameters time courses document gives overview steps use package perform analysis. depth description data, theoretical background different steps examples additional data sets see package website.","code":""},{"path":[]},{"path":"/articles/Overview_HTP.html","id":"ex1","dir":"Articles","previous_headings":"Data description","what":"Example 1: photosystem efficiency in Arabidopsis","title":"statgenHTP: A short overview","text":"used vignette contains data experiment Phenovator platform (WUR, Netherlands, (Flood et al. 2016)) Arabidopsis plants. consists one experiment 1440 plants grown growth chamber different light intensity. data set called “PhenovatorDat1” included package. number tested genotypes (Genotype) 192 6-7 replicates per genotype (Replicate). Four reference genotypes also tested 15 30 replicates. studied trait photosystem II efficiency (EffpsII) extracted pictures time (Rooijen et al. 2017). unique ID plant recorded (pos), together pot position row (x) column (y). data set also includes factors design: position camera (Image_pos) pots table (Basin).","code":"data(\"PhenovatorDat1\")"},{"path":"/articles/Overview_HTP.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data preparation","title":"statgenHTP: A short overview","text":"first step modeling platform experiment data statgenHTP package creating object class TP (Time Points). object, time points split single data.frames. used throughout statgenHTP package input analyses. data set, 3 plants contain less 50% 73 time points. user may choose check data plants eventually remove data set. function getTimePoints() allows generate data.frame containing time points numbers TP object. example first 6 time points phenoTP:","code":"## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\", \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49 summary(phenoTP) #> phenoTP contains data for experiment Phenovator. #>  #> It contains 73 time points. #> First time point: 2018-05-31 16:37:00  #> Last time point: 2018-06-18 16:37:00  #>  #> The following genotypes are defined as check genotypes: check1, check2, check3, check4. ## Extract the time points table. timepoint <- getTimePoints(phenoTP)"},{"path":"/articles/Overview_HTP.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data visualization","title":"statgenHTP: A short overview","text":"Several plots can made investigate content TP object.","code":""},{"path":"/articles/Overview_HTP.html","id":"layout-plot","dir":"Articles","previous_headings":"Data visualization","what":"Layout plot","title":"statgenHTP: A short overview","text":"first type plot displays layout experiment grid using row column coordinates. default option creates plots time points TP object. can restricted selection time points using number option timePoints. repId specified creating TP object, replicate blocks delineated black line. Missing plots indicated white enclosed bold black line. type plot allows checking design experiment.  , third time point displayed corresponds 1st June 2018 11:37. Note title can manually changed using title option. plot can extended highlighting interesting genotypes layout. Hereafter check genotypes highlighted:  possible add labels genotypes layout.  can visualize raw data given trait layout, heatmap. type plot gives first indication spatial variability given time point. can investigated spatial modeling.","code":"## Plot the layout for the third time point. plot(phenoTP,       plotType = \"layout\",      timePoints = 3) ## Plot the layout for the third time point with the check genotypes highlighted. plot(phenoTP,       plotType = \"layout\",      timePoints = 3,        highlight = c(\"check1\", \"check2\", \"check3\", \"check4\")) ## Plot the layout for the third time point. plot(phenoTP,       plotType = \"layout\",      timePoints = 3,        highlight = c(\"check1\", \"check2\", \"check3\", \"check4\"),      showGeno = TRUE) ## Plot the layout for the third time point. plot(phenoTP,       plotType = \"layout\",      timePoints = 3,        traits = \"EffpsII\")"},{"path":"/articles/Overview_HTP.html","id":"raw-data-plot","dir":"Articles","previous_headings":"Data visualization","what":"Raw data plot","title":"statgenHTP: A short overview","text":"Raw data can displayed per genotype one color per plotId.","code":"## Create the raw data time courses for three genotypes. plot(phenoTP,       traits = \"EffpsII\",      plotType = \"raw\",      genotypes = c(\"G001\", \"G002\", \"check1\"))"},{"path":"/articles/Overview_HTP.html","id":"boxplot","dir":"Articles","previous_headings":"Data visualization","what":"Boxplot","title":"statgenHTP: A short overview","text":"Boxplots can made visually assess variability trait(s) TP object. default box plotted per time point specified trait using time points.","code":"## Create a boxplot for \"EffpsII\" using the default all time points. plot(phenoTP,       plotType = \"box\",      traits = \"EffpsII\")"},{"path":"/articles/Overview_HTP.html","id":"correlation-plot","dir":"Articles","previous_headings":"Data visualization","what":"Correlation plot","title":"statgenHTP: A short overview","text":"Finally, plot correlations observations time specified trait can made. order plot chronological default time points used.","code":"## Create a correlation plot for \"EffpsII\" for a selection of time points. plot(phenoTP,       plotType = \"cor\",      traits = \"EffpsII\",      timePoints = seq(from = 1, to = 73, by = 5))"},{"path":"/articles/Overview_HTP.html","id":"outlier-detection-for-single-observations","dir":"Articles","previous_headings":"","what":"Outlier detection for single observations","title":"statgenHTP: A short overview","text":"Time courses phenotypic data viewed continuous time-related functions. first cleaning step consists roughly checking consistency point neighbors within time course. Outlying single observations measurements follow expected behavior given time. detection outlying observations done “one time course ”. Local regression used locally approximate time courses parametric functions. First local regression fitted set points, fit interpolated points. confidence interval can calculated. Points outside interval annotated outliers. predicted values confidence interval can visualized using plot function.  annotated points can replaced NA studied trait using function removeSingleOut(). creates new TP object.","code":"# First select a subset of plants, for example here 4 plants. plantSel <- c(\"c1r17\",\"c13r17\",\"c6r51\",\"c21r24\")  # Then run on the subset resuVatorHTP <- detectSingleOut(TP = phenoTP,                                 trait = \"EffpsII\",                                 plotIds = plantSel,                                 confIntSize = 3,                                 nnLocfit = 0.1) plot(resuVatorHTP,      outOnly = FALSE) phenoTPOut <- removeSingleOut(phenoTP,                               resuVatorHTP)"},{"path":"/articles/Overview_HTP.html","id":"correction-for-spatial-trends","dir":"Articles","previous_headings":"","what":"Correction for spatial trends","title":"statgenHTP: A short overview","text":"Phenotyping facilities display spatial heterogeneity. example, spatial variability incident light can go 100% pots within greenhouse (Cabrera-Bosquet et al. 2016). Taking account spatial trends prerequisite precise estimation genetic treatment effects. way field trials, platform experiments obey standard principles experimental design statistical modeling. get corrected values genotypic predictions want accurately separate genetic effects spatial effects time point. , time point spatial model fitted trait interested . statgenHTP spatial models can either fitted using SpATS (Rodríguez-Álvarez et al. 2018) ASReml (Butler et al. 2017). vignette focus models fitted using SpATS. models fitted using ASReml see vignette.","code":""},{"path":"/articles/Overview_HTP.html","id":"SpATS","dir":"Articles","previous_headings":"Correction for spatial trends","what":"Spatial model using SpATS","title":"statgenHTP: A short overview","text":"SpATS used modeling, extra spatial term included model. spatial component composed using PSANOVA function SpATS package uses 2-dimensional smoothing P-splines described Lee, Durbán, Eilers (2013) Rodríguez-Álvarez et al. (2018). example model fitted points.","code":"## Fit a model for a few time points. modPhenoSp <- fitModels(TP = phenoTPOut,                          trait = \"EffpsII\",                         timePoints = c(1, 33, 36, 54, 73)) summary(modPhenoSp) #> Models in modPhenoSp where fitted for experiment Phenovator. #>  #> It contains 5 time points. #> The models were fitted using SpATS."},{"path":"/articles/Overview_HTP.html","id":"model-plots","dir":"Articles","previous_headings":"Correction for spatial trends","what":"Model plots","title":"statgenHTP: A short overview","text":"Several types plots can made fitted models. spatial plot consists spatial plots raw data, fitted values, residuals either BLUEs BLUPs, histogram BLUEs BLUPs. SpATS used modeling extra plot fitted spatial trend included.  also possible create time lapse ratio spatial trends time. scale previously described. time lapse always written output file. rawPred plot raw data (colored dots, one color per plotId) plotted overlaid predicted values (black dots) fitted model. Note: model fitted limited number time points, reflected plots. plots using time point see vignette.  corrPred plot corrected data (colored dots, one color per plotId) plotted overlaid predicted values (black dots) fitted model.  last three types plot display different model parameters time. Plot type herit plots heritability time.  Plot type variance plots residual, column row variances time. plots can serve diagnostics experiment.  Plot type effDim plots effective dimension models fitted using SpATS time.","code":"plot(modPhenoSp,      timePoints = 36,      plotType = \"spatial\",      spaTrend = \"percentage\") plot(modPhenoSp,       plotType = \"timeLapse\",      outFile = \"TimeLapse_modPhenoSp.gif\") plot(modPhenoSp,       plotType = \"rawPred\",      genotypes = c(\"G007\", \"G058\")) plot(modPhenoSp,       plotType = \"corrPred\",      genotypes = c(\"G007\", \"G058\")) plot(modPhenoSp,       plotType = \"herit\",      yLim = c(0.5, 1)) plot(modPhenoSp,       plotType = \"variance\") plot(modPhenoSp,       plotType = \"effDim\",      whichED = c(\"colId\", \"rowId\", \"fColRow\",\"colfRow\", \"surface\"),      EDType = \"ratio\")"},{"path":"/articles/Overview_HTP.html","id":"extracting-model-results","dir":"Articles","previous_headings":"Correction for spatial trends","what":"Extracting model results","title":"statgenHTP: A short overview","text":"results can extracted shown table . first column contains function names. second column contains short description result extracted , needed, states modeling engines can extracted.","code":"## Extract the genotypic predictions for one time point:  genoPredSp <- getGenoPred(modPhenoSp)"},{"path":"/articles/Overview_HTP.html","id":"outlier-detection-for-series-of-observations","dir":"Articles","previous_headings":"","what":"Outlier detection for series of observations","title":"statgenHTP: A short overview","text":"correcting data spatial trends, can now check data contains outliers series observations. modeling time course using non-parametric smoothing spline fixed number knots. estimates spline coefficients extracted per time course (typically per plant) correlations coefficient vectors calculated identify outlying time courses, .e., plants. function fitSpline() fits P-spline per plant selected trait. function output contains P-spline model coefficients values predicted dense grid using P-spline model coefficients. can visualize P-spline predictions first derivatives subset genotypes subset plots.  coefficients used tag suspect time courses function detectSerieOut(). Visualizing results see genotype G151 plant c21r25 tagged outlier:  can remove outlying plants data set fitted spline.","code":"data(spatCorrectedVator)   # Fit P-splines using on a subset of genotypes. subGenoVator <- c(\"G160\", \"G151\")  fit.spline <- fitSpline(inDat = spatCorrectedVator,                         trait = \"EffpsII_corr\",                         genotypes = subGenoVator,                         knots = 50,                         useTimeNumber = TRUE,                         timeNumber = \"timeNumHour\") # Extracting the tables of predicted values and P-spline coefficients predDat <- fit.spline$predDat coefDat <- fit.spline$coefDat plot(fit.spline,      genotypes = \"G160\") outVator <- detectSerieOut(corrDat = spatCorrectedVator,                            predDat = predDat,                            coefDat = coefDat,                            trait = \"EffpsII_corr\",                            genotypes = subGenoVator,                            thrCor = 0.9,                            thrPca = 30) plot(outVator, genotypes = \"G151\") fit.splineOut <- removeSerieOut(fitSpline = fit.spline,                                 serieOut = outVator)"},{"path":"/articles/Overview_HTP.html","id":"modeling-the-genetic-signal","dir":"Articles","previous_headings":"","what":"Modeling the genetic signal","title":"statgenHTP: A short overview","text":"section presents second stage two-stage approach proposed Pérez-Valencia et al. (2022). aim modeling temporal evolution genetic signal spatial correction performed phenotypic trait. Data consist time-series (curves) (possibly) spatially corrected plant/plot phenotype. assume data present hierarchical structure plots nested genotypes, genotypes nested “populations”. model sample curves additive decomposition phenotypic variation time considered, P-spline-based three-level nested hierarchical data model (hereafter refer psHDM) used. illustrate analysis, use Arabidopsis data corrected spatial trends, spatCorrectedVator. simplicity, assume one population (pop) two genotypes (genotypes subGenoVator). data structure new “population” variable follows use spatially corrected photosystem II efficiency (EffpsII_corr) response variable. assume plots (plotId, M=14M = 14) nested genotypes (genotype, L=2L = 2), genotypes nested populations (pop, k=1k = 1). Furthermore, uncertainty propagated stage stage using weights (wt). Since context longitudinal models, natural use time covariate (.e., timepoints phenotype interest measured, timeNumber = timeNumHour)","code":"data(spatCorrectedVator) spatCorrectedVator[[\"pop\"]] <- as.factor(rep(\"Pop1\", nrow(spatCorrectedVator))) str(droplevels(spatCorrectedVator[spatCorrectedVator$genotype %in% subGenoVator,])) #> 'data.frame':    995 obs. of  14 variables: #>  $ timeNumber  : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ timePoint   : POSIXct, format: \"2018-05-31 16:37:00\" \"2018-05-31 16:37:00\" ... #>  $ EffpsII_corr: num  0.666 0.654 0.646 0.692 0.675 ... #>  $ EffpsII     : num  0.663 0.655 0.655 0.706 0.672 0.649 0.692 0.67 0.714 0.674 ... #>  $ wt          : num  36 36 36 36 36 ... #>  $ genotype    : Factor w/ 2 levels \"G151\",\"G160\": 1 1 1 1 1 1 2 2 2 2 ... #>  $ check       : Factor w/ 1 level \"noCheck\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ repId       : Factor w/ 7 levels \"1\",\"2\",\"3\",\"4\",..: 7 2 4 6 1 3 7 4 5 2 ... #>  $ Image_pos   : Factor w/ 9 levels \"1a\",\"1b\",\"1c\",..: 3 1 7 8 5 4 2 2 7 8 ... #>  $ rowId       : Factor w/ 13 levels \"1\",\"4\",\"7\",\"11\",..: 12 5 11 1 3 9 13 13 7 8 ... #>  $ colId       : Factor w/ 11 levels \"1\",\"2\",\"5\",\"6\",..: 9 1 4 8 2 5 10 2 11 7 ... #>  $ plotId      : Factor w/ 14 levels \"c10r29\",\"c13r1\",..: 4 6 11 2 9 12 5 8 7 1 ... #>  $ timeNumHour : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ pop         : Factor w/ 1 level \"Pop1\": 1 1 1 1 1 1 1 1 1 1 ..."},{"path":"/articles/Overview_HTP.html","id":"model-fitting","dir":"Articles","previous_headings":"Modeling the genetic signal","what":"Model fitting","title":"statgenHTP: A short overview","text":"fit psHDM model, use fitSplineHDM() function cubic (bdeg =3= 3) B-spline basis functions nseg =20= 20 segments, second order penalties (pord=2= 2) represent functions three levels hierarchy (population, genotype plot). resulting object, case fit.psHDM, contains different information data structure, fitting process, three data frames estimated curves three-levels hierarchy (explore fit.psHDM$popLevel, fit.psHDM$genoLevel, fit.psHDM$plotLevel). , contains estimated trajectories deviations, well first second-order derivatives. detailed description returned values see help(fitSplineHDM). curves can used input extract time‐independent parameters characterise genotypes (illustrated final section vignette).","code":"## Fit P-spline HDM. fit.psHDM  <- fitSplineHDM(inDat = spatCorrectedVator,                            genotypes = subGenoVator,                            trait = \"EffpsII_corr\",                            useTimeNumber = TRUE,                            timeNumber = \"timeNumHour\",                                                       pop = \"pop\",                            genotype = \"genotype\",                            plotId = \"plotId\",                            weights = \"wt\",                            difVar = list(geno = FALSE, plot = FALSE),                            smoothPop = list(nseg = 20, bdeg = 3, pord = 2),                            smoothGeno = list(nseg = 20, bdeg = 3, pord = 2),                            smoothPlot = list(nseg = 20, bdeg = 3, pord = 2),                            trace = FALSE)"},{"path":"/articles/Overview_HTP.html","id":"model-prediction","dir":"Articles","previous_headings":"Modeling the genetic signal","what":"Model prediction","title":"statgenHTP: A short overview","text":"predict.psHDM() function can used obtain predictions fitted psHDM model (obtained using fitSplineHDM() function; see ). particular, function allows obtaining predictions (estimated curves level hierarchy) dense grid time points. Also, allows calculation standard errors. standard errors can used construct (approximate) pointwise confidence intervals estimated curves. following code, use fit.psHDM object make predictions three levels hierarchy (pred = list(pop = TRUE, geno = TRUE, plot = TRUE)), obtain standard errors population genotype levels (se = list(pop = TRUE, geno = TRUE, plot = FALSE)). original data measured 7373 time points, predictions obtained 100100 time points range original time points (argument newtimes). result, three data frames predictions (standard errors) population (pred.psHDM$popLevel), genotype (pred.psHDM$GenoLevel) plot (pred.psHDM$plotLevel) levels returned.","code":"## Predict P-spline HDM. pred.psHDM <- predict(object = fit.psHDM,                       newtimes = seq(min(fit.psHDM$time[[\"timeNumber\"]]),                                      max(fit.psHDM$time[[\"timeNumber\"]]),                                      length.out = 100),                       pred = list(pop = TRUE, geno = TRUE, plot = TRUE),                       se = list(pop = TRUE, geno = TRUE, plot = FALSE),                       trace = FALSE)"},{"path":"/articles/Overview_HTP.html","id":"model-plot","dir":"Articles","previous_headings":"Modeling the genetic signal","what":"Model plot","title":"statgenHTP: A short overview","text":"plot.psHDM() function plots psHDM objects. note objects class psHDM can obtained using fitSplineHDM() predict.psHDM() functions. cases, resulting object contains information estimated trajectories, deviations first-order derivatives three levels hierarchy. , plots curves can obtained. addition, plots obtained object obtained using predict.psHDM() function, 95%95\\% pointwise confidence intervals also depicted. illustrate usage function plot.psHDM(), use object pred.psHDM obtained prediction section. plotType = \"popTra\", estimated population trajectory (f̂p(t)\\hat{f}_p(t)) depicted 95%95\\% pointwise confidence intervals. Additionally, grey lines represent observed trait used fitSplineHDM function.  plotType = \"popGenoTra\", estimated population (f̂p(t)\\hat{f}_p(t)) genotype-especific (f̂p(t)+f̂pg(t)\\hat{f}_p(t)+\\hat{f}_{pg}(t)) trajectories depicted genotypes. 95%95\\% pointwise confidence intervals depicted population trajectory. let user explore plot first-order derivative estimated population genotype trajectories (plotType = \"popGenoDeriv\").  plotType = \"GenoDev\", estimated genotype-specific deviations (f̂pg(t)\\hat{f}_{pg}(t)) depicted genotypes.  Finally, interested obtaining plots plot level, use plotType = \"genoPlotTra\". , estimated genotype (f̂p(t)+f̂pg(t)\\hat{f}_p(t)+\\hat{f}_{pg}(t)) plot-specific (f̂p(t)+f̂pg(t)+f̂pgi(t)\\hat{f}_p(t)+\\hat{f}_{pg}(t)+\\hat{f}_{pgi}(t)) trajectories depicted plots separately selection genotypes. Also, 95%95\\% pointwise confidence intervals depicted estimated genotype-specific trajectories.","code":"plot(pred.psHDM, plotType = \"popTra\", themeSizeHDM = 10) plot(pred.psHDM, plotType = \"popGenoTra\", themeSizeHDM = 10) plot(pred.psHDM, plotType = \"genoDev\", themeSizeHDM = 10) plot(pred.psHDM,       plotType = \"genoPlotTra\",       themeSizeHDM = 10)"},{"path":"/articles/Overview_HTP.html","id":"estimation-of-parameters-from-time-courses","dir":"Articles","previous_headings":"","what":"Estimation of parameters from time courses","title":"statgenHTP: A short overview","text":"final step HTP data analysis extracting interesting parameters modeled time courses. parameters can analyzed, example GxE analysis (see statgenGxE), genetic analysis (see statgenGWAS). Note timeMin timeMax specified time scale used fitting spline, case time number scale.  parameters can also obtained estimated time courses genetic signal modeled psHDM model. example, can extract minimum spatially corrected photosystem II efficiency (previously estimated plot trajectories), two genotypes (illustration).","code":"paramVator1 <- estimateSplineParameters(x = fit.splineOut,                                         estimate = \"predictions\",                                         what = \"AUC\",                                         timeMin = 330,                                         timeMax = 432,                                         genotypes = subGenoVator)  plot(paramVator1, plotType = \"box\") paramVator2 <-   estimateSplineParameters(x = pred.psHDM,                            what = \"min\",                            fitLevel = \"plot\",                            estimate = \"predictions\")  plot(paramVator2, plotType = \"box\")"},{"path":[]},{"path":"/articles/vignettesSite/HierarchicalDataModel_HTP.html","id":"introduction","dir":"Articles > VignettesSite","previous_headings":"","what":"Introduction","title":"statgenHTP tutorial: 5. Modelling the temporal evolution of the genetic signal","text":"document presents second stage two-stage approach proposed Pérez-Valencia et al. (2022). aim modeling temporal evolution genetic signal spatial correction performed phenotypic trait (see statgenHTP tutorial: 3. Correction spatial trends). Data consist time-series (curves) (possibly) spatially corrected plant/plot phenotype. assume data present hierarchical structure plots nested genotypes, genotypes nested “populations”. denote ỹpgi(t)\\tilde{y}_{pgi}(t) spatially corrected phenotype iith plant (=1,…,mpgi = 1,\\ldots,m_{pg}) ggth genotype g=1,…,ℓpg=1,\\ldots,\\ell_p ppth population (p=1,…,kp= 1,\\ldots, k) time tt. , total M=∑p=1k∑g=1ℓpmpgM=\\sum_{p=1}^k{\\sum_{g=1}^{\\ell_p}{m_{pg}}} plots/plants, L=∑p=1kℓpL=\\sum_{p=1}^k{\\ell_p} genotypes, kk populations. model sample curves following additive decomposition phenotypic variation time considered, P-spline-based three-level nested hierarchical data model (hereafter refer psHDM) used ỹpgi(t)=fp(t)+fpg(t)+fpgi(t)+εpgi(t),εpgi(t)∼N(0,σ2wpgi(t)),\\tilde{y}_{pgi}(t) = f_{p}(t) + f_{pg}(t) + f_{pgi}(t) + \\varepsilon_{pgi}(t),\\;\\;\\varepsilon_{pgi}(t)\\sim N\\left(0, \\sigma^{2}w_{pgi}(t)\\right), fpf_{p} ppth population mean function. fpgf_{pg} genotype-specific deviation fpf_p ggth genotype. Note fp+fpgf_{p} + f_{pg} represents genotype-specific trajectory ggth genotype. fpgif_{pgi} plot-specific deviation fpgf_{pg} iith plot. way genotypes, fp+fpg+fpgif_{p} + f_{pg} + f_{pgi} plot-specific trajectory iith plot. εpgi\\varepsilon_{pgi} random noise curve, wpgiw_{pgi} weight obtained , e.g., spatial correction. illustration curves follows  proceeding, note functions described tutorial can applied spatially corrected data (see statgenHTP tutorial: 3. Correction spatial trends) raw data. functions also allow estimating first- second-order derivative curves trajectory deviation curves three levels hierarchy (populations, genotypes plots/plants). curves can used input extract time‐independent parameters characterise genotypes (see statgenHTP tutorial: 6. Estimation parameters time courses). illustrate analysis, use maize data corrected spatial trends, spatCorrectedArch. data structure follows specific example first need specify genotype--treatment interaction (genotype--water regime). explained Pérez-Valencia et al. (2022), actual implementation psHDM model allow crossed effect, nested effects. , analyse dataset proposed model, combine genotype water regime information follows (.e., 180180genoTreat = 9090genotype ×\\times22treat) use spatially corrected leaf area (LeafArea_corr) response variable. assume plots (plotId, M=1673M = 1673) nested genotype--water regime (genoTreat, L=180L = 180), genotype--water regime nested populations/panel--water regime (geno.decomp, k=4k = 4). Furthermore, uncertainty propagated stage stage using weights (wt). Since context longitudinal models, natural use time covariate (.e., timepoints phenotype interest measured). note implemented function requires numerical times. timeNumber column used returned getCorrected() function, user aware simple enumeration timepoints. Care must taken dealing non-equidistant timepoints keep time scale original timePoint column. user can also specify numerical time transformation. instance, example, first construct new column called DOY time days year following code depicts kind curves modelled (plant/plot level)","code":"data(spatCorrectedArch) str(spatCorrectedArch) #> 'data.frame':    40573 obs. of  10 variables: #>  $ timeNumber   : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ timePoint    : POSIXct, format: \"2017-04-13\" \"2017-04-13\" ... #>  $ LeafArea_corr: num  0.00256 0.0024 0.00321 0.00303 0.00269 ... #>  $ LeafArea     : num  0.00287 0.00252 0.00338 0.00326 0.00249 ... #>  $ wt           : num  2262 2262 2262 2262 2262 ... #>  $ genotype     : Factor w/ 90 levels \"GenoA01\",\"GenoA02\",..: 1 1 1 1 1 2 2 2 2 2 ... #>  $ geno.decomp  : Factor w/ 4 levels \"WD_Panel1\",\"WD_Panel2\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ rowId        : int  2 3 26 24 56 38 60 16 24 52 ... #>  $ colId        : int  16 28 24 20 21 16 20 24 21 28 ... #>  $ plotId       : Factor w/ 1673 levels \"c10r1\",\"c10r10\",..: 368 1156 914 672 767 388 712 903 732 1181 ... str(spatCorrectedArch[[\"geno.decomp\"]]) #>  Factor w/ 4 levels \"WD_Panel1\",\"WD_Panel2\",..: 1 1 1 1 1 1 1 1 1 1 ... str(spatCorrectedArch[[\"genotype\"]]) #>  Factor w/ 90 levels \"GenoA01\",\"GenoA02\",..: 1 1 1 1 1 2 2 2 2 2 ...  ## Extracting the treatment: water regime (WW, WD). spatCorrectedArch[[\"treat\"]] <- as.factor(substr(spatCorrectedArch[[\"geno.decomp\"]],                                                  start = 1, stop = 2)) str(spatCorrectedArch[[\"treat\"]]) #>  Factor w/ 2 levels \"WD\",\"WW\": 1 1 1 1 1 1 1 1 1 1 ...  ## Specifying the genotype-by-treatment interaction. spatCorrectedArch[[\"genoTreat\"]] <-   interaction(spatCorrectedArch[[\"genotype\"]],              spatCorrectedArch[[\"treat\"]], sep = \"_\")  str(spatCorrectedArch[[\"genoTreat\"]]) #>  Factor w/ 180 levels \"GenoA01_WD\",\"GenoA02_WD\",..: 1 1 1 1 1 2 2 2 2 2 ... ## Create a new timeNumber with days of the year (DOY) spatCorrectedArch[[\"DOY\"]] <- as.numeric(strftime(spatCorrectedArch$timePoint, format = \"%j\")) ggplot2::ggplot(data = spatCorrectedArch,                 ggplot2::aes(x= DOY, y = LeafArea_corr, group = plotId)) +   ggplot2::geom_line(na.rm = TRUE) +   ggplot2::facet_grid(~geno.decomp) +   ggplot2::labs(y = \"Spatially corrected leaf area\")"},{"path":"/articles/vignettesSite/HierarchicalDataModel_HTP.html","id":"fit-the-p-spline-hierarchical-curve-data-model-pshdm","dir":"Articles > VignettesSite","previous_headings":"","what":"Fit the P-spline Hierarchical Curve Data Model (psHDM)","title":"statgenHTP tutorial: 5. Modelling the temporal evolution of the genetic signal","text":"fit psHDM model, use fitSplineHDM() function (results fitting process provided ) example , use cubic (bdeg=3bdeg = 3) B-spline basis dimension bpop=bgen=bplot=10b_{pop} = b_{gen} = b_{plot} = 10 second order penalties (pord=2pord = 2) represent fpf_p, fpgf_{pg} fpgif_{pgi}. note fitSplineHDM() function uses argument number segments nseg instead number B-spline basis bb (nseg = bb - bdeg, , example, b=10b = 10 nseg = 7). encourage user try different values nseg compare results. model configuration, mixed model formulation psHDM model total 18570 regression coefficients (fixed random 4×10+180×10+1673×104 \\times 10 + 180 \\times 10 + 1673 \\times 10) 1111 variance components. fitting can also performed subset genotypes plots. user needs specify desired vector genotypes /plotIds. Note: user prefers use different penalty orders /B-spline degree values, parameterisation proposed Wood, Scheipl, Faraway (2013) one used fitSplineHDM function obtain design matrix fixed effects (.e., 𝐗\\boldsymbol{X}) mixed model formulation. useTimeNumber = FALSE, internal numerical transformation time points (timePoint) made (returned) using first time point origin. example using weights obtained spatial correction performed previous stage (.e., weights = wt, wt column spatCorrectedArch). However, weights = NULL, weights considered one. instance, case modelling raw data. difVar argument, user can also specify genetic variation varies across populations (geno = TRUE) plant variation changes across genotypes (plot = TRUE). Consequently, number variance components, fit.psHDM$vc (effective dimension, fit.psHDM$ed) increase number populations /genotypes, number coefficients remain . trace = TRUE report changes deviance effective dimension printed iteration. useful understand importance model components (Rodríguez-Álvarez et al. 2018), well detect convergence problems. resulting object, case fit.psHDM, contains different information data structure, fitting process, three data frames estimated curves three-levels hierarchy (population, genotypes plots). , contains estimated trajectories deviations, well first second-order derivatives. detailed description returned values see help(fitSplineHDM). example estimated curves structure follows. popLevel contains, population (pop), estimated population trajectories (f̂p\\hat{f}_p, fPop) well first (f̂′p\\hat{f}'_p, fPopDeriv1) second-order (f̂″p\\hat{f}''_p, fPopDeriv2) derivatives Estimated curves population level , genoLevel contains, genotype (genotype) population (pop) Estimated genotype deviations (f̂pg\\hat{f}_{pg}, fGeno) well first (f̂′pg\\hat{f}'_{pg}, fGenoDeriv1) second-order (f̂″pg\\hat{f}''_{pg}, fGenoDeriv2) derivatives. Estimated genotype trajectories (f̂p+f̂pg\\hat{f}_{p} +\\hat{f}_{pg}, fGenoDev) well first (f̂′p+f̂′pg\\hat{f}'_{p} +\\hat{f}'_{pg}, fGenoDevDeriv1) second-order (f̂″p+f̂″pg\\hat{f}''_{p} +\\hat{f}''_{pg}, fGenoDevDeriv2) derivatives. Estimated curves genotype level Finally, plotLevel contains, plot (plotId) genotype (genotype) population (pop) Estimated plot deviations (f̂pgi\\hat{f}_{pgi}, fPlot) well first (f̂′pgi\\hat{f}'_{pgi}, fPlotDeriv1) second-order (f̂″pgi\\hat{f}''_{pgi}, fPlotDeriv2) derivatives. Estimated plot trajectories (f̂p+f̂pg+f̂pgi\\hat{f}_{p} +\\hat{f}_{pg}+\\hat{f}_{pgi}, fPlotDev) well first (f̂′p+f̂′pg+f̂′pgi\\hat{f}'_{p} +\\hat{f}'_{pg}+\\hat{f}'_{pgi}, fPlotDevDeriv1) second-order (f̂″p+f̂″pg+f̂″pgi\\hat{f}''_{p} +\\hat{f}''_{pg}+\\hat{f}''_{pgi}, fPlotDevDeriv2) derivatives. original trait values (ỹpgi\\tilde{y}_{pgi}, ObsPlot). Estimated curves plot level","code":"## Fit P-Splines Hierarchical Curve Data Model for all genotypes. fit.psHDM  <- fitSplineHDM(inDat = spatCorrectedArch,                            trait = \"LeafArea_corr\",                            useTimeNumber = TRUE,                            timeNumber = \"DOY\",                            pop = \"geno.decomp\",                            genotype = \"genoTreat\",                            plotId = \"plotId\",                            weights = \"wt\",                            difVar = list(geno = FALSE, plot = FALSE),                            smoothPop = list(nseg = 7, bdeg = 3, pord = 2),                            smoothGeno = list(nseg = 7, bdeg = 3, pord = 2),                            smoothPlot = list(nseg = 7, bdeg = 3, pord = 2),                            trace = TRUE) ## Fit P-Splines Hierarchical Curve Data Model for all genotypes. fit.psHDM  <- fitSplineHDM(inDat = spatCorrectedArch,                            trait = \"LeafArea_corr\",                            useTimeNumber = TRUE,                            timeNumber = \"DOY\",                            pop = \"geno.decomp\",                            genotype = \"genoTreat\",                            plotId = \"plotId\",                            weights = \"wt\",                            difVar = list(geno = FALSE, plot = FALSE),                            smoothPop = list(nseg = 7, bdeg = 3, pord = 2),                            smoothGeno = list(nseg = 7, bdeg = 3, pord = 2),                            smoothPlot = list(nseg = 7, bdeg = 3, pord = 2),                            trace = TRUE) #> Effective dimensions #> ------------------------- #> It.     Deviance        p1        p2        p3        p4     g.int     g.slp  g.smooth     i.int     i.slp  i.smooth #>   1 -124003.216245     7.808     7.457     7.822     7.447   153.841   155.047  1086.529  1469.062  1513.633  8713.310 #>   2 -409208.877371     7.889     7.770     7.975     7.897   150.423   159.550   892.712  1236.532  1456.125  7041.664 #>   3 -412800.467660     7.910     7.787     7.983     7.925   157.527   162.575   803.841  1237.270  1465.159  5894.104 #>   4 -413841.057202     7.913     7.786     7.985     7.922   159.272   163.089   787.598  1286.468  1471.329  5195.497 #>   5 -414152.439567     7.914     7.783     7.985     7.918   159.443   163.042   790.487  1315.662  1474.828  4806.468 #>   6 -414237.155491     7.913     7.782     7.985     7.916   159.428   162.976   795.234  1328.862  1476.488  4604.336 #>   7 -414258.638613     7.913     7.780     7.985     7.914   159.431   162.949   798.454  1334.470  1477.223  4503.289 #>   8 -414263.887260     7.913     7.780     7.985     7.913   159.445   162.942   800.254  1336.873  1477.549  4453.660 #>   9 -414265.145823     7.913     7.779     7.985     7.913   159.458   162.941   801.189  1337.934  1477.696  4429.464 #>  10 -414265.444801     7.913     7.779     7.985     7.913   159.466   162.942   801.658  1338.419  1477.764  4417.702 #>  11 -414265.515495     7.913     7.779     7.985     7.913   159.470   162.942   801.890  1338.646  1477.796  4411.991 #>  12 -414265.532172     7.913     7.779     7.985     7.913   159.473   162.943   802.003  1338.754  1477.812  4409.220 #>  13 -414265.536102     7.913     7.779     7.985     7.913   159.474   162.943   802.058  1338.805  1477.819  4407.875 #>  14 -414265.537027     7.913     7.779     7.985     7.913   159.474   162.943   802.085  1338.830  1477.823  4407.222 names(fit.psHDM) #>  [1] \"y\"           \"time\"        \"popLevs\"     \"genoLevs\"    \"plotLevs\"    #>  [6] \"nPlotPop\"    \"nGenoPop\"    \"nPlotGeno\"   \"MM\"          \"ed\"          #> [11] \"vc\"          \"phi\"         \"coeff\"       \"deviance\"    \"convergence\" #> [16] \"dim\"         \"family\"      \"cholHn\"      \"smooth\"      \"popLevel\"    #> [21] \"genoLevel\"   \"plotLevel\" names(fit.psHDM$popLevel) #> [1] \"timeNumber\" \"timePoint\"  \"pop\"        \"fPop\"       \"fPopDeriv1\" #> [6] \"fPopDeriv2\" names(fit.psHDM$genoLevel) #>  [1] \"timeNumber\"     \"timePoint\"      \"pop\"            \"genotype\"       #>  [5] \"fGeno\"          \"fGenoDeriv1\"    \"fGenoDeriv2\"    \"fGenoDev\"       #>  [9] \"fGenoDevDeriv1\" \"fGenoDevDeriv2\" names(fit.psHDM$plotLevel) #>  [1] \"timeNumber\"     \"timePoint\"      \"pop\"            \"genotype\"       #>  [5] \"plotId\"         \"fPlot\"          \"fPlotDeriv1\"    \"fPlotDeriv2\"    #>  [9] \"fPlotDev\"       \"fPlotDevDeriv1\" \"fPlotDevDeriv2\" \"obsPlot\""},{"path":"/articles/vignettesSite/HierarchicalDataModel_HTP.html","id":"predict-the-p-spline-hierarchical-curve-data-model","dir":"Articles > VignettesSite","previous_headings":"","what":"Predict the P-spline Hierarchical Curve Data Model","title":"statgenHTP tutorial: 5. Modelling the temporal evolution of the genetic signal","text":"predict.psHDM() function can used obtain predictions fitted psHDM model (obtained using fitSplineHDM() function; see ). particular, function allows obtaining predictions (estimated curves level hierarchy) dense grid time points. Also, allows calculation standard errors. standard errors can used construct (approximate) pointwise confidence intervals estimated curves. Note 1: newtimes especified, original time points used. Note 2: hierarchical model assumed, predictions inner levels (genotypes plots) require predictions outer levels (populations genotypes). , user wants predictions (argument pred) genotype level (geno = TRUE), predictions population level (pop = TRUE) calculated well. Note 3: Standard errors (argument se) plot level demand large computing memory time. example, use original time points, estimation take approximately 20 minutes (64-bit) 4.2.1 1.60GHz Dual-Core i5 processor computer 16GB RAM macOS Monterrey Version 12.5. , strictly necessary, suggest user set standard errors plot level FALSE. comparison, plot = FALSE standard errors argument, computation time example 4 seconds approximately. code , use fit.psHDM object make predictions three levels hierarchy (pred = list(pop = TRUE, geno = TRUE, plot = TRUE)), obtain standard errors population genotype levels (se = list(pop = TRUE, geno = TRUE, plot = FALSE)). original data measured 33 time points, predictions obtained 100 time points range original time points (argument newtimes). result, three data frames predictions (standard errors) population (popLevel), genotype (GenoLevel) plot (plotLevel) levels returned Note 4: original time points used predictions, data frame plot level (plotLevel) additional column (obsPlot) raw data. Otherwise, additional data frame (plotObs) raw data returned. Predicted curves standard errors population level Predicted curves standard errors genotype level Predicted curves standard errors plot level","code":"## Predict the P-Splines Hierarchical Curve Data Model on a dense grid ## with standard errors at the population and genotype levels pred.psHDM <- predict(object = fit.psHDM,                       newtimes = seq(min(fit.psHDM$time[[\"timeNumber\"]]),                                      max(fit.psHDM$time[[\"timeNumber\"]]),                                      length.out = 100),                       pred = list(pop = TRUE, geno = TRUE, plot = TRUE),                       se = list(pop = TRUE, geno = TRUE, plot = FALSE),                       trace = FALSE) names(pred.psHDM) #> [1] \"newtimes\"  \"popLevel\"  \"genoLevel\" \"plotLevel\" \"plotObs\" names(pred.psHDM$popLevel) #> [1] \"timeNumber\"  \"timePoint\"   \"pop\"         \"fPop\"        \"fPopDeriv1\"  #> [6] \"fPopDeriv2\"  \"sePop\"       \"sePopDeriv1\" \"sePopDeriv2\" names(pred.psHDM$GenoLevel) #> NULL names(pred.psHDM$plotLevel) #>  [1] \"timeNumber\"     \"timePoint\"      \"pop\"            \"genotype\"       #>  [5] \"plotId\"         \"fPlot\"          \"fPlotDeriv1\"    \"fPlotDeriv2\"    #>  [9] \"fPlotDev\"       \"fPlotDevDeriv1\" \"fPlotDevDeriv2\""},{"path":"/articles/vignettesSite/HierarchicalDataModel_HTP.html","id":"plot-the-p-spline-hierarchical-curve-data-model","dir":"Articles > VignettesSite","previous_headings":"","what":"Plot the P-spline Hierarchical Curve Data Model","title":"statgenHTP tutorial: 5. Modelling the temporal evolution of the genetic signal","text":"plot.psHDM() function plots psHDM objects. note objects class psHDM can obtained using fitSplineHDM() predict.psHDM() functions. cases, resulting object contains information estimated trajectories, deviations first-order derivatives three levels hierarchy. , plots curves can obtained. addition, plots obtained object obtained using predict.psHDM() function, 95%95\\% pointwise confidence intervals also depicted. illustrate usage function plot.psHDM(), use object pred.psHDM obtained prediction section.","code":""},{"path":"/articles/vignettesSite/HierarchicalDataModel_HTP.html","id":"plots-at-population-level","dir":"Articles > VignettesSite","previous_headings":"Plot the P-spline Hierarchical Curve Data Model","what":"Plots at population level","title":"statgenHTP tutorial: 5. Modelling the temporal evolution of the genetic signal","text":"plotType = \"popTra\", estimated population-specific trajectories depicted (f̂p(t)\\hat{f}_p(t)) separately population, 95%95\\% pointwise confidence intervals. Additionally, grey lines represent observed trait used fitSplineHDM function (.e., ỹpgi\\tilde{y}_{pgi}).","code":"## Population-specific trajectories. plot(pred.psHDM, plotType = \"popTra\", themeSizeHDM = 10)"},{"path":"/articles/vignettesSite/HierarchicalDataModel_HTP.html","id":"plots-at-genotype-level","dir":"Articles > VignettesSite","previous_headings":"Plot the P-spline Hierarchical Curve Data Model","what":"Plots at genotype level","title":"statgenHTP tutorial: 5. Modelling the temporal evolution of the genetic signal","text":"genotype level can visualise three plots: plotType = \"popGenoTra\", estimated population (f̂p(t)\\hat{f}_p(t)) genotype-specific (f̂p(t)+f̂pg(t)\\hat{f}_p(t)+\\hat{f}_{pg}(t)) trajectories depicted genotypes separately population. 95%95\\% pointwise confidence intervals depicted estimated population trajectories.  plotType = \"popGenoDeriv\", first-order derivative estimated population (f̂′p(t)\\hat{f}'_p(t)) genotype-specific (f̂′p(t)+f̂′pg(t)\\hat{f}'_p(t)+\\hat{f}'_{pg}(t)) trajectories depicted genotypes separately population. 95%95\\% pointwise confidence intervals depicted estimated trajectories population level.  Finally, plotType = \"GenoDev\", estimated genotype-specific deviations (f̂pg(t)\\hat{f}_{pg}(t)) depicted genotypes separately population.","code":"## Population and genotype-specific trajectories.   plot(pred.psHDM, plotType = \"popGenoTra\", themeSizeHDM = 10) ## First-order derivative of the population- and genotype-specific trajectories.   plot(pred.psHDM, plotType = \"popGenoDeriv\", themeSizeHDM = 10) ## Genotype-specific deviations.   plot(pred.psHDM, plotType = \"genoDev\", themeSizeHDM = 10)"},{"path":"/articles/vignettesSite/HierarchicalDataModel_HTP.html","id":"plots-at-plot-level","dir":"Articles > VignettesSite","previous_headings":"Plot the P-spline Hierarchical Curve Data Model","what":"Plots at plot level","title":"statgenHTP tutorial: 5. Modelling the temporal evolution of the genetic signal","text":"Finally, interested obtaining plots plot level, use plotType = \"genoPlotTra\". , estimated genotype (f̂p(t)+f̂pg(t)\\hat{f}_p(t)+\\hat{f}_{pg}(t)) plot-specific (f̂p(t)+f̂pg(t)+f̂pgi(t)\\hat{f}_p(t)+\\hat{f}_{pg}(t)+\\hat{f}_{pgi}(t)) trajectories depicted plots separately selection genotypes. Also, 95%95\\% pointwise confidence intervals depicted estimated genotype-specific trajectories. plotType, user option change names (genotypeNames) /order (genotypeOrder) selected genotypes.","code":"## As an example we used ten randomly selected genotypes  set.seed(1) plot.genos  <- sample(pred.psHDM$genoLevel$genotype,10, replace = FALSE) names.genos <- substring(plot.genos, first = 5) names.genos #>  [1] \"B25_WW\" \"A48_WD\" \"A43_WW\" \"A16_WW\" \"B25_WD\" \"A41_WD\" \"A45_WW\" \"A26_WW\" #>  [9] \"A33_WW\" \"B27_WW\"  ## Genotype- and plot-specific trajectories. plot(pred.psHDM,       plotType = \"genoPlotTra\",       genotypes = plot.genos, genotypeNames = names.genos,      themeSizeHDM = 10)"},{"path":[]},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"the-statgenhtp-package","dir":"Articles > VignettesSite","previous_headings":"","what":"The statgenHTP Package","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"statgenHTP package developed easy--use package analyzing data coming high throughput phenotyping (HTP) platform experiments. package provides many options plotting exporting results analyses. developed within EPPN2020project meet needs automated analyses HTP data. New phenotyping techniques enable measuring traits high throughput, traits measured multiple time points hundreds thousands plants. requires automatic modeling data (Tardieu et al. 2017) model robust, flexible easy selection steps. aim package provide suit functions (1) detect outliers time point plant levels, (2) accurately separate genetic effects spatial effects time point (3) estimate relevant parameters modeled time course. provide user either genotypic values corrected values can used modeling, e.g. extract responses environment (Eeuwijk et al. 2019). Structure package overall structure package 6 main parts: Data description preparation - statgenHTP tutorial: 1. Introduction, data description preparation Outlier detection: single observations - statgenHTP tutorial: 2. Outlier detection single observations Correction spatial trends - statgenHTP tutorial: 3. Correction spatial trends Outlier detection: series observations - statgenHTP tutorial: 4. Outlier detection series observations Modeling genetic signal - statgenHTP tutorial: 5. Modelling temporal evolution genetic signal Parameter estimation - statgenHTP tutorial: 6. Estimation parameters time courses document describes detail three data sets used exemplify functions. also contains descriptions prepare data analysis visualize .","code":""},{"path":[]},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"ex1","dir":"Articles > VignettesSite","previous_headings":"Data description","what":"Example 1: photosystem efficiency in Arabidopsis","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"first example used package contains data experiment Phenovator platform (WUR, Netherlands, (Flood et al. 2016)) Arabidopsis plants. consists one experiment 1440 plants grown growth chamber different light intensity. data set called “PhenovatorDat1” included package.  number tested genotypes (Genotype) 192 6-7 replicates per genotype (Replicate). Four reference genotypes also tested 15 30 replicates. studied trait photosystem II efficiency (EffpsII) extracted pictures time (Rooijen et al. 2017). unique ID plant recorded (pos), together pot position row (x) column (y). data set also includes factors design: position camera (Image_pos) pots table (Basin).","code":"data(\"PhenovatorDat1\")"},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"ex2","dir":"Articles > VignettesSite","previous_headings":"Data description","what":"Example 2: maize leaf growth in greenhouse","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"second example used tutorial contains data experiment Phenoarch platform maize plants (INRAE, France, (Cabrera-Bosquet et al. 2016)). consists greenhouse containing conveyor belt structure 28 lanes carrying 60 carts one pot (.e. 1680 pots).  dataset, two genotypic panels (population) two water scenarios (Scenario), well-watered (WW) water deficit (WD). first population contains 60 genotypes (geno) 14 replicates: 7 WW 7 WD. second population contains 30 genotypes 8 replicates, 4 WW 4 WD. leaf area biomass individual plants estimated images taken 13 directions. Briefly, pixels extracted RGB images converted biomass leaf area ((Brichet et al. 2017)). Time courses biomass (Biomass) leaf area (LeafArea) expressed function thermal time (TT). height plants (PlantHeight) also estimated pictures. number visible leaves (LeafCount) counted least week plant. prevent errors leaf counting, leaves 5 10 plant marked soon appearance. phyllocron calculated slope linear regression number leaves thermal time beginning water deficit. unique ID plant recorded (pos), together pot position row (Row) column (Col).","code":"data(\"PhenoarchDat1\")"},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"ex3","dir":"Articles > VignettesSite","previous_headings":"Data description","what":"Example 3: Tip root data set","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"tip root data set obtained experiment performed RootPhAir platform (Louvain-La-Neuve University). platform consists two aeroponic tanks 495 plants located greenhouse. Plants held strip containing 5 plants, 99 strips per tank. Sprinklers placed bottom tanks spray nutrient solution. Strips move constantly plants pictured strip passes front camera. Plants pictured every two hours. root system described two dimensions, root tip position depth width (tipPos_y tipPos_x respectively) deduced image analysis.  genotype (Genotype), tip position (tipPos_x tipPos_y) main root tracked time (Time) plant (plantId). Plant coordinates defined using strip number (Strip) position strip (Pos), 1 5. NOTE: platform, plants constantly moving therefore observations particular time always include limited number plants. consequence, possible perform spatial analysis per time point, functions outliers detection longitudinal modeling available illustrated various tutorials. Estimates dynamical parameters can submitted spatial analysis statgenSTA package.","code":"data(\"RootDat1\")"},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"data-preparation","dir":"Articles > VignettesSite","previous_headings":"","what":"Data preparation","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"first step modeling platform experiment data statgenHTP package creating object class TP (Time Points). object, time points split single data.frames. used throughout statgenHTP package input analyses. NOTE: possible use functions package phenotype measured one time point . case, user create column time point containing unique measurement time. TP object can created data.frame function createTimePoints. function number things: Quality control input data. example, warnings given 50% observations missing plant. Rename columns default column names used functions statgenHTP package. example, column data containing variety/accession/genotype renamed “genotype”. Original column names stored attribute individual data.frames TP object. Convert column types default column types. example, column “genotype” converted factor “rowNum” numeric column. Convert column containing time time format. needed, time format can provided timeFormat. example, date/time input form “day/month/year hour:minute”, use %d/%m/%Y %H:%M. full list abbreviations see R package strptime. NOTE: input time just numeric, function convert time 01-01-1970 (origin time package lubridate). Add columns check checkGenotypes addCheck=TRUE. Split data separate data.frames time points. TP object list data.frames data.frame contains data single time point. one time point output list one item. Add data.frame columns timeNumber timePoint attribute “timePoints” TP object. data.frame can used referencing time points unique number. NOTE: possible transform TP object back data.frame .data.frame() function.","code":""},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"example-1","dir":"Articles > VignettesSite","previous_headings":"Data preparation","what":"Example 1","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"first data set (see section 3.1), TP object firstly created containing time points. data set, 3 plants contain less 50% 73 time points. user may choose check data plants eventually remove data set. function getTimePoints allows generate data.frame containing time points numbers TP object. example first 6 time points phenoTP: TP object just created list 73 items, one time point original data.frame (called “PhenovatorDat1”). option experimentName used identifying data set requirement. column “Genotype” original data renamed “genotype” converted factor. columns “Replicate” “pos” renamed converted likewise. option repId used replication blocks defined design (.e. one block contains one full replicate genotypes). case, column containing replicate block specified . newly created column “plotId” needs unique identifier plot plant. columns “y” “x” renamed “rowNum” “colNum” respectively. Simultaneously, two columns “rowId” “colId” created containing information converted factor. seemingly duplicate information needed spatial analysis. information columns renamed creating TP object stored attribute individual data.frame object. option addCheck set TRUE specify genotypes listed checkGenotypes reference genotypes (checks). option create column “check” value “noCheck” genotypes checkGenotypes name genotype checkGenotypes. Also column “genoCheck” added names genotypes checkGenotypes NA checkGenotypes (see statgenHTP tutorial: 3. Correction spatial trends). columns necessary fitting models data augmented design (Piepho Williams 2016).","code":"## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\", \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49 summary(phenoTP) #> phenoTP contains data for experiment Phenovator. #>  #> It contains 73 time points. #> First time point: 2018-05-31 16:37:00  #> Last time point: 2018-06-18 16:37:00  #>  #> The following genotypes are defined as check genotypes: check1, check2, check3, check4. ## Extract the time points table. timepoint <- getTimePoints(phenoTP)"},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"data-visualization","dir":"Articles > VignettesSite","previous_headings":"","what":"Data visualization","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"Several plots can made investigate content TP object.","code":""},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"layout-plot","dir":"Articles > VignettesSite","previous_headings":"Data visualization","what":"Layout plot","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"first type plot displays layout experiment grid using row column coordinates. default option creates plots time points TP object. can restricted selection time points using number option timePoints. repId specified creating TP object, replicate blocks delineated black line. Missing plots indicated white enclosed bold black line. type plot allows checking design experiment.  , third time point displayed corresponds 1st June 2018 11:37. Note title can manually changed using title option. plot can extended highlighting interesting genotypes layout. Hereafter check genotypes highlighted:  possible add labels genotypes layout.  can visualize raw data given trait layout, heatmap. type plot gives first indication spatial variability given time point. can investigated spatial modeling (see statgenHTP tutorial: 3. Correction spatial trends).","code":"## Plot the layout for the third time point. plot(phenoTP,       plotType = \"layout\",      timePoints = 3) ## Plot the layout for the third time point with the check genotypes highlighted. plot(phenoTP,       plotType = \"layout\",      timePoints = 3,        highlight = c(\"check1\", \"check2\", \"check3\", \"check4\")) ## Plot the layout for the third time point. plot(phenoTP,       plotType = \"layout\",      timePoints = 3,        highlight = c(\"check1\", \"check2\", \"check3\", \"check4\"),      showGeno = TRUE) ## Plot the layout for the third time point. plot(phenoTP,       plotType = \"layout\",      timePoints = 3,        traits = \"EffpsII\")"},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"raw-data-plot","dir":"Articles > VignettesSite","previous_headings":"Data visualization","what":"Raw data plot","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"Raw data can displayed per genotype one color per plotId. default genotypes used can restricted subset genotypes using parameter genotypes. default, data plotted dots can changed lines setting plotLine = TRUE. NOTE: color plotId whether point lines used. However, color might change vignettes. color assigned per plotId generated using color shade depending total number plotIds visualized. plot raw data per genotype gives first indication plant--plant variability may already help visualizing strange points plants genotype. confirmed detection () individually outlying observations (see statgenHTP tutorial: 2. Outlier detection single observations) (ii) outlying series observations (see statgenHTP tutorial: 4. Outlier detection series observations)","code":"## Create the raw data time courses for three genotypes. plot(phenoTP,       traits = \"EffpsII\",      plotType = \"raw\",      genotypes = c(\"G001\", \"G002\", \"check1\"))"},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"boxplot","dir":"Articles > VignettesSite","previous_headings":"Data visualization","what":"Boxplot","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"Boxplots can made visually assess variability trait(s) TP object. default box plotted per time point specified trait using time points. example, Phenovator data, variability larger beginning experiment (change light) reduced end (change light intensity).  Colors can applied investigate variability factor within time points using option colorBy. example , investigate variability replicates within time point 1 5, one box per replicate per time point.  option groupBy allows assessing variability factor combining multiple time points. example, investigate replicate variability grouped time points 1 5, one box per replicate.  boxes can ordered using orderBy. Boxes can ordered alphabetically (“alphabetic”) group mean (“ascending”, “descending”).","code":"## Create a boxplot for \"EffpsII\" using the default all time points. plot(phenoTP,       plotType = \"box\",      traits = \"EffpsII\") ## Create a boxplot for \"EffpsII\" with 5 time points and boxes colored by \"repId\" within ## time point. plot(phenoTP,       plotType = \"box\",      traits = \"EffpsII\",       timePoints = 1:5,      colorBy = \"repId\") ## Create a boxplot for \"EffpsII\" with 5 time points and boxes grouped by \"repId\". plot(phenoTP,       plotType = \"box\",      traits = \"EffpsII\",       timePoints = 1:5,      groupBy = \"repId\")"},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"correlation-plot","dir":"Articles > VignettesSite","previous_headings":"Data visualization","what":"Correlation plot","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"Finally, plot correlations observations time specified trait can made. order plot chronological default time points used.  NOTE: plot can exported pdf document using outFile option containing name document.","code":"## Create a correlation plot for \"EffpsII\" for a selection of time points. plot(phenoTP,       plotType = \"cor\",      traits = \"EffpsII\",      timePoints = seq(from = 1, to = 73, by = 5))"},{"path":[]},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"example-2","dir":"Articles > VignettesSite","previous_headings":"Examples","what":"Example 2","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"second TP object created containing observations time: “phenoTParch” object just created list 33 items, one time point original data.frame (called “PhenoarchDat1”, see section 3.2). can visualize layout raw data way Phenovator data.  Note raw data, can use geno.decomp option split genotypes using water scenario. , can visualize difference irrigation levels two genotypes: leaf area WW larger WD slope leaf area progression also seems larger:","code":"phenoTParch <- createTimePoints(dat = PhenoarchDat1,                                 experimentName = \"Phenoarch\",                                 genotype = \"Genotype\",                                 timePoint = \"Date\",                                 plotId = \"pos\",                                 rowNum = \"Row\",                                 colNum = \"Col\") summary(phenoTParch) #> phenoTParch contains data for experiment Phenoarch. #>  #> It contains 33 time points. #> First time point: 2017-04-13  #> Last time point: 2017-05-15  #>  #> No check genotypes are defined. plot(phenoTParch,       traits = \"LeafArea\",      plotType = \"raw\",      genotypes = c(\"GenoA01\", \"GenoA02\"),      geno.decomp = \"Scenario\")"},{"path":"/articles/vignettesSite/Intro_HTP.html","id":"example-3","dir":"Articles > VignettesSite","previous_headings":"Examples","what":"Example 3","title":"statgenHTP tutorial: 1. Introduction, data description and preparation","text":"third TP object created containing time points: explained section 3.3, common time point plants, .e. date plants pictured. Instead, plants constantly moving pictures taken every 20 minutes. Hence, row data.frame contains unique time point. consequence, “rootTP” object just created list 16,275 items, one time point original data.frame (called “RootDat1”).","code":"rootTP <- createTimePoints(dat = RootDat1,                            experimentName = \"UCL1\",                            genotype = \"Genotype\",                            timePoint = \"Time\",                            plotId = \"plantId\",                            rowNum = \"Strip\",                            colNum = \"Pos\") summary(rootTP) #> rootTP contains data for experiment UCL1. #>  #> It contains 16275 time points. #> First time point: 2016-11-06 12:58:47  #> Last time point: 2016-11-15 01:32:08  #>  #> No check genotypes are defined. plot(rootTP,       traits = \"tipPos_y\",      plotType = \"raw\",      genotypes = c(\"2\", \"8\", \"252\"))"},{"path":[]},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"introduction","dir":"Articles > VignettesSite","previous_headings":"","what":"Introduction","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"document describes protocol detect outlying time courses, observed single plant plot, examples various platforms. Traits may measured directly indirectly (image analysis example). protocol considers time series single traits. protocol applicable raw data data corrected spatially (see statgenHTP tutorial: 3. Correction spatial trends) raw data.","code":""},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"a-nonparametric-smoothing-associated-with-a-pca","dir":"Articles > VignettesSite","previous_headings":"Introduction","what":"A nonparametric smoothing associated with a PCA","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"time course modeled non-parametric smoothing spline fixed number knots. piecewise cubic polynomial ((Eubank 1999), (Eilers, Marx, Durbán 2015)) fitted mixed model ((Currie Durban 2002)). P-spline smoothing 20 knots low penalty, (Hugelier, Devos, Ruckebusch 2016). individual B-splines (correct coefficients) shown (colored lines), well sum representing fit (thick black line). estimates spline coefficients extracted per time course (typically per plant) correlations coefficient vectors calculated identify outlying time courses, .e., plants. outlying time course low correlation majority time courses. support analysis correlations, principal component analysis can done plant (time course) spline coefficient matrix. PCA plot plant scores show outlying plants. P-splines mixed model, smoothing coefficient optimized restricted maximum likelihood number knots chosen user.","code":""},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"principal-component-analysis-on-smoothed-time-series-to-identify-outlying-series-","dir":"Articles > VignettesSite","previous_headings":"","what":"Principal component analysis on smoothed time series to identify outlying series.","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"function fitSpline() fits P-spline per plant selected trait. penalty (.e. amount smoothing) chosen REML number knots can determined user using knots. P-spline, knots equally spaced number can large. user also chose appropriate minimum number time points data set per plant minNoTP. plant less time points minimum, skipped analysis. functions illustrated three example data sets. information data, see statgenHTP tutorial: 1. Introduction.","code":""},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"example-1","dir":"Articles > VignettesSite","previous_headings":"Principal component analysis on smoothed time series to identify outlying series.","what":"Example 1","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"data Phenovator platform corrected spatial trends time points outliers removed (see statgenHTP tutorial: 2. Outlier detection single observations statgenHTP tutorial: 3. Correction spatial trends). stage, cleaned corrected data used: object fit.spline contains P-spline model coefficients (coefDat) predicted value (pred.value table ), .e values predicted using P-spline model coefficients. Predictions made denser grid time points: time points prediction calculated smallest gap two time points divided 9, dividing smallest gap 10 segments. object fit.spline also contains first second derivatives (deriv deriv2 table , see also statgenHTP tutorial: 6. Estimation parameters time courses). Conversion numerical time required fit P-splines. keep time scale original timePoint column, numerical transformation time points made using first time point origin (column timeNumber table ). numerical time can also provided user using option useTimeNumber = TRUE. allows using thermal time manual conversion. example, provide new column specified timeNumber time hours since first measurement. can visualize P-spline predictions first derivatives subset genotypes subset plots.    object fit.spline also contains values P-splines coefficients: coefficients used tag suspect time courses function detectSerieOut(). function performs PCA coefficients (data.frame coefDat) per genotype calculates pairwise angle plants PCA plot. Plants tagged mean angle threshold (thrPca), see lines reason = angle table . function also calculates pairwise-correlation coefficients per genotype. Plants tagged correlation given threshold (thrCor), see lines reason = mean corr table . Finally pairwise-ratios slopes linear model fitted spline coefficients computed. Plants tagged average pairwise-ratio lower given threshold (thrSlope), see lines reasion = slope table . obvious reasons, detection work least three replicates per genotype. Genotypes less three replicates skipped. subset genotypes, 2 plants tagged outliers: c3r43 c9r4 low correlations. addition c9r4 also high angles low average ratio slope. outVator can visualized selecting genotypes. genotype G160 plant c9r4 tagged outlier:  figure contains: (top) scatter plot trait value y-axis time x-axis. Points raw corrected data lines P-spline predictions, one color per plant (legend). Filled dots represent outlying plants, open dots non-outlying plants. (bottom left) matrix bottom right correlations plant scores heatmap. scale centered 0.9 (correlation threshold) see glance outlying plants low correlations (usually correlation high plants). top left matrix shows average slopes heatmap. scale centered 0.7 (slope threshold) see glance outlying plants low average slope (usually average slopes high plants). (bottom right) PCA plot plant scores. Usually, plants grouped first axis explains variation. plant outlying, located apart plants second axis. possible visualize plants tagged one two reasons instead three. can done specifying e.g. reason = slope visualizing plants tagged low average slope. relevant plots shown. case upper left part correlation plot PCA plot.  numerical time used fit splines, can used also plot outliers using option useTimeNumber = TRUE providing column name timeNumber. Finally, outlying plants can removed data set… … predictions. possible remove plants tagged one two reasons instead three. can done specifying e.g. reason = slope removing plants tagged low average slope.","code":"data(spatCorrectedVator)   # Fit P-splines using on a subset of genotypes. subGenoVator <- c(\"G070\", \"G160\", \"G151\", \"G179\", \"G175\", \"G004\", \"G055\")  fit.spline <- fitSpline(inDat = spatCorrectedVator,                         trait = \"EffpsII_corr\",                         genotypes = subGenoVator,                         knots = 50) # Extracting the tables of predicted values and P-spline coefficients predDat <- fit.spline$predDat coefDat <- fit.spline$coefDat fit.splineNum <- fitSpline(inDat = spatCorrectedVator,                            trait = \"EffpsII_corr\",                            genotypes = subGenoVator,                            knots = 50,                            useTimeNumber = TRUE,                            timeNumber = \"timeNumHour\") plot(fit.spline,      genotypes = \"G160\") plot(fit.spline,      plotIds = \"c10r29\",      plotType = \"predictions\") plot(fit.spline,      plotIds = \"c10r29\",      plotType = \"derivatives\") outVator <- detectSerieOut(corrDat = spatCorrectedVator,                            predDat = predDat,                            coefDat = coefDat,                            trait = \"EffpsII_corr\",                            genotypes = subGenoVator,                            thrCor = 0.9,                            thrPca = 30,                            thrSlope = 0.7) plot(outVator, genotypes = \"G160\") plot(outVator,       genotypes = \"G160\",       reason = \"slope\") plot(outVator,       genotypes = \"G160\",        useTimeNumber = TRUE,       timeNumber = \"timeNumHour\") spatCorrectedVatorOut <- removeSerieOut(dat = spatCorrectedVator,                                         serieOut = outVator) # Check for time series outliers in data from which individual outlying  # observations were already removed and to which a spatial adjustment has been applied head(spatCorrectedVator[spatCorrectedVator$plotId == \"c9r4\",                         c(\"EffpsII_corr\", \"EffpsII\")]) #>       EffpsII_corr EffpsII #> 12377    0.5643125   0.559 #> 16648    0.6693775   0.669 #> 18073    0.7261539   0.727 #> 19502    0.7994927   0.799 #> 20933           NA      NA #> 22361           NA      NA # Check the same value in the new corrected data.frame head(spatCorrectedVatorOut[spatCorrectedVatorOut$plotId == \"c9r4\",                            c(\"EffpsII_corr\", \"EffpsII\")]) #>       EffpsII_corr EffpsII #> 12377           NA   0.559 #> 16648           NA   0.669 #> 18073           NA   0.727 #> 19502           NA   0.799 #> 20933           NA      NA #> 22361           NA      NA fit.splineOut <- removeSerieOut(fitSpline = fit.spline,                                 serieOut = outVator) fit.splineNumOut <- removeSerieOut(fitSpline = fit.splineNum,                                    serieOut = outVator) spatCorrectedVatorOut <- removeSerieOut(dat = spatCorrectedVator,                                         serieOut = outVator,                                         reason = \"slope\")"},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"impact-of-the-number-of-knots-on-the-smoothing","dir":"Articles > VignettesSite","previous_headings":"Principal component analysis on smoothed time series to identify outlying series. > Example 1","what":"Impact of the number of knots on the smoothing","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"one plant data set, fit P-spline 10 50 knots visualize predictions compare smoothness. advise user perform tests number knots subset plants running function plants. 10 knots:  predicted curve smooth , case, following precisely real data curve shape. comparing plants genotype curve shape might identify outlying plant. 50 knots:  predicted curve less smooth follows actual curve shape. seems good setting detect strange curve shape among replicates genotype.","code":"sp10k <- fitSpline(inDat = spatCorrectedVator,                    trait = \"EffpsII_corr\",                    plotIds = \"c10r29\",                    knots = 10) plot(sp10k) sp50k <- fitSpline(inDat = spatCorrectedVator,                    trait = \"EffpsII_corr\",                    plotIds = \"c10r29\",                    knots = 50) plot(sp50k)"},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"example-2","dir":"Articles > VignettesSite","previous_headings":"Principal component analysis on smoothed time series to identify outlying series.","what":"Example 2","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"data PhenoArch platform corrected spatial trends individually outlying observations removed (see statgenHTP tutorial: 2. Outlier detection single observations statgenHTP tutorial: 3. Correction spatial trends).   , geno.decomp option also split plants genotype well watered water deficit conditions. outlier detection run per treatment narrow angle threshold","code":"data(spatCorrectedArch)   subGenoArch <- c(\"GenoA01\", \"GenoA02\", \"GenoA34\", \"GenoA04\", \"GenoB01\", \"GenoB02\", \"GenoB07\")  fit.splineArch <- fitSpline(inDat = spatCorrectedArch,                              trait = \"LeafArea_corr\",                             genotypes = subGenoArch,                             knots = 30,                             minNoTP = 18)  predDatArch <- fit.splineArch$predDat coefDatArch <- fit.splineArch$coefDat plot(fit.splineArch,      plotIds = \"c11r9\",      plotType =  \"predictions\") plot(fit.splineArch,      plotIds = \"c11r9\",      plotType =  \"derivatives\") outArch <- detectSerieOut(corrDat = spatCorrectedArch,                           predDat = predDatArch,                           coefDat = coefDatArch,                           trait = \"LeafArea_corr\",                           genotypes = subGenoArch,                           thrCor = 0.9,                           thrPca = 10,                           thrSlope = 0.8,                           geno.decomp = \"geno.decomp\") plot(outArch, genotypes = \"GenoA01\", geno.decomp = \"WD_Panel1\") spatCorrectedArchOut <- removeSerieOut(dat = spatCorrectedArch,                                        serieOut = outArch) # Check for time series outliers in data from which individual outlying  # observations were already removed and to which a spatial adjustment has been applied head(spatCorrectedArch[spatCorrectedArch$plotId == \"c16r2\",                        c(\"LeafArea_corr\", \"LeafArea\")]) #>       LeafArea_corr    LeafArea #> 1       0.002564006 0.002871676 #> 2173    0.004164635 0.004066799 #> 3843    0.005768308 0.005690233 #> 5509    0.008211606 0.008043967 #> 7180    0.009454458 0.010399790 #> 10049   0.015047478 0.015390857 # Check the same value in the new corrected data.frame head(spatCorrectedArchOut[spatCorrectedArchOut$plotId == \"c16r2\",                           c(\"LeafArea_corr\", \"LeafArea\")]) #>       LeafArea_corr    LeafArea #> 1                NA 0.002871676 #> 2173             NA 0.004066799 #> 3843             NA 0.005690233 #> 5509             NA 0.008043967 #> 7180             NA 0.010399790 #> 10049            NA 0.015390857"},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"example-3","dir":"Articles > VignettesSite","previous_headings":"Principal component analysis on smoothed time series to identify outlying series.","what":"Example 3","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"data RootPhAir platform corrected spatial trends individually outlying observations removed (see statgenHTP tutorial: 2. Outlier detection single observations).","code":"subGenoRoot <- c( \"2\", \"6\", \"8\", \"9\", \"10\", \"520\", \"522\") fit.splineRoot <- fitSpline(inDat = noCorrectedRoot,                             trait = \"tipPos_y\",                             knots = 10,                             genotypes = subGenoRoot,                             minNoTP = 0,                             useTimeNumber = TRUE,                             timeNumber = \"thermalTime\")  predDatRoot <- fit.splineRoot$predDat coefDatRoot <- fit.splineRoot$coefDat row.names(coefDatRoot) <- 1:nrow(coefDatRoot) plot(fit.splineRoot,      genotypes = \"2\") outRoot <- detectSerieOut(corrDat = noCorrectedRoot,                           predDat = predDatRoot,                           coefDat = coefDatRoot,                           trait = \"tipPos_y\",                           genotypes = subGenoRoot,                           thrCor = 0.9,                           thrPca = 20,                           thrSlope = 0.7) plot(outRoot,      genotypes = \"6\") noCorrectedRootOut <- removeSerieOut(dat = noCorrectedRoot,                                      serieOut = outRoot) # Check one value annotated as outlier in the original corrected data.frame head(noCorrectedRoot[noCorrectedRoot$plotId == \"A_21_2\", \"tipPos_y\"]) #> [1] 3.042857 3.057143       NA 2.317857 2.325000 2.371429 # Check the same value in the new corrected data.frame head(noCorrectedRootOut[noCorrectedRootOut$plotId == \"A_21_2\", \"tipPos_y\"]) #> [1] NA NA NA NA NA NA"},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"detection-of-outlier-plants-on-a-multi-criteria-basis-with-expert-rules","dir":"Articles > VignettesSite","previous_headings":"","what":"Detection of outlier plants on a multi-criteria basis, with expert rules","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"outlier plant defined biological replicate deviating overall distribution plants multi-criteria basis, regardless quality measurements. Detecting outlier plants can done monitoring single criterion, plant height biomass. case, procedure detecting outlying series observations used, discussed previous sections. taking account one criterion can sometimes restrictive deciding whether plant outlier . multi-criteria approach relevant. multi-criteria method considers several traits jointly, rules set experts depending species. describe approach followed maize experiment, see (Alvarez Prado et al. 2019).","code":""},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"rules-in-the-case-of-maize","dir":"Articles > VignettesSite","previous_headings":"Detection of outlier plants on a multi-criteria basis, with expert rules","what":"Rules in the case of maize","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"consider two categories potentially outlier plants, namely apparently small large plants. detection unexpectedly small plants likely physiological disorders, progression leaf stages considered addition time course shoot biomass. Indeed, leaf appearance rate carries non-redundant information compared biomass (confirmed standard correlation calculations). usually presents low plant--plant variability except case severe disorders, relatively insensitive environmental cues temperature. detection unexpectedly large plants, potentially associated wrong genotype identification, combining plant height biomass can result efficient identification.","code":""},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"statistical-modelling-a-mixed-model-at-a-given-time-defined-by-the-expert","dir":"Articles > VignettesSite","previous_headings":"Detection of outlier plants on a multi-criteria basis, with expert rules","what":"Statistical modelling: a mixed model at a given time (defined by the expert)","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"selected traits measured (estimated) specific time (example 24 d20°C PhenoArch data set), time just beginning differentiation two watering treatments. allows replicates per genotype. also reduces dimensionality time courses one point, simplify statistical models implemented later. Schematic representation multi-trait approach detection outlier plants (case maize), Alvarez Prado et al. (2019). shown , traits modeled mixed model considers fixed experiment (Env) effect random genotypic (G), replicate (R) spatial (C) effects. model can fitted SpATS R-package, (Rodríguez-Álvarez et al. (2018)). Residuals (deviations) can directly computed fitting, confidence interval. Plants, whose deviations criteria leaf appearance rate biomass less lower bound interval, considered outlier small plants. Plants, whose deviations criteria plant height biomass greater upper bound confidence interval, considered outlier large plants.","code":""},{"path":"/articles/vignettesSite/OutlierSerieObs_HTP.html","id":"implementation-in-statgenhtp","dir":"Articles > VignettesSite","previous_headings":"Detection of outlier plants on a multi-criteria basis, with expert rules","what":"Implementation in statgenHTP","title":"statgenHTP tutorial: 4. Outlier detection for series of observations","text":"Mixed models fitted R-package SpATS use detectSingleOutMaize function, developed specifically maize data, described . function fits mixed model parameter, tests whether residual deviations lower (criteria considered small plants) higher (criteria considered big plants) specified threshold. detectSingleOutMaize returns list 3 elements : modDat: data.frame used data set, fitted values residuals calculated models, plants flagged outlier smallPlants: data.frame “small” plants detected outliers bigPlants: data.frame “big” plants detected outliers table shows smallPlants data.frame.","code":"phenoTParch <- createTimePoints(dat = PhenoarchDat1,                                 experimentName = \"Phenoarch\",                                 genotype = \"Genotype\",                                 timePoint = \"Date\",                                 plotId = \"pos\",                                 rowNum = \"Row\",                                 colNum = \"Col\")  test2 <- detectSingleOutMaize(phenoTParch,                                timeBeforeTrt = \"2017-04-27\",                               trait1 = \"Biomass\",                               trait2 = \"PlantHeight\",                               trait3 = \"phyllocron\")"},{"path":[]},{"path":"/articles/vignettesSite/OutlierSingleObs_HTP.html","id":"introduction","dir":"Articles > VignettesSite","previous_headings":"","what":"Introduction","title":"statgenHTP tutorial: 2. Outlier detection for single observations","text":"outlier usually defined observation appears inconsistent remainder data set (Barnett Lewis 1994). Observations may single time points (Grubbs 1950) whole time courses one variables (Hubert, Rousseeuw, Segaert 2015). illustration given , see difficulty deciding whether biomass time course (red curve bottom left) atypical set time courses plants genotype, whether slow growth due plant’s position platform. Heatmap biomass estimated specific time point (color gradient) plant according location platform (line, position). Well-watered (WW) treatment left, water deficit (WD) right. plots show biomass time courses given genotype (3 repetitions treatment). question whether red growth curve left corresponds outlier plant (e.g. seed problem) whether slow growth due plant’s location platform (PhenoArch Platform, INRAE). Courtesy: Llorenç Cabrera-Bosquet Santiago Alvarez Prado. concept outlier can extended “outlier plants”, defined biological replicates deviating overall distribution plants multi-criteria basis, regardless quality measurements (Alvarez Prado et al. 2019). documents describes procedures detect outlying single observations time course examples experimental data measured directly plants indirectly via image analysis example.","code":""},{"path":"/articles/vignettesSite/OutlierSingleObs_HTP.html","id":"definition-of-outlying-single-observation","dir":"Articles > VignettesSite","previous_headings":"","what":"Definition of outlying single observation","title":"statgenHTP tutorial: 2. Outlier detection for single observations","text":"Time courses phenotypic data viewed continuous time-related functions. first cleaning step consists roughly checking consistency point neighbors within time course. Outlying single observations measurements follow expected behavior given time. detection outlying observations done “one time course ”. Identifying removing points facilitate outlier detection series observations plants, proposed statgenHTP tutorial: 4. Outlier detection series observations. detection requires fitting model data, function time. Two types models can used, one based nonlinear parametric regression (Gompertz Model sigmoidal function example) non-parametric regression. Data annotation based comparison experimental data estimated value model. differ significantly, data annotated suspect. NOTE: consider non-parametric regression package flexibility fit type curve.","code":""},{"path":"/articles/vignettesSite/OutlierSingleObs_HTP.html","id":"illustration-of-the-non-parametric-function","dir":"Articles > VignettesSite","previous_headings":"","what":"Illustration of the non-parametric function","title":"statgenHTP tutorial: 2. Outlier detection for single observations","text":"Local regression well known smoothing technique locally approximates unknown function parametric functions. two-step procedure included detectSingleOut function: locfit() function fits local regression set points, , predict() function used interpolate fit points. confidence interval can calculated. Points outside interval annotated outliers. user can set: smoothing parameter nnLocfit. parameter nn locfit package (Nearest neighbor component smoothing parameter). parameter values range 0 1, higher value, smoother curve. level confidence interval confIntSize calculated. large value calculates wide interval fewer outliers annotated. parameter checkEdges. setting parameter TRUE (default), local regression check done determine first last time point time series plot outliers. locfit function sometimes problems determining outliers. use parameter demonstrated example 2. functions illustrated three example data sets. information data, see statgenHTP tutorial: 1. Introduction, data description preparation.","code":""},{"path":"/articles/vignettesSite/OutlierSingleObs_HTP.html","id":"example-1","dir":"Articles > VignettesSite","previous_headings":"Illustration of the non-parametric function","what":"Example 1","title":"statgenHTP tutorial: 2. Outlier detection for single observations","text":"First TP object created containing time points. run function subset plants set parameters, using plotIds option. smoothing parameter nnLocfit set 0.1. curves atypical detect strange points, fitted curves smooth. confidence interval size confIntSize set 3 relatively narrow interval. function output data.frame containing plant time point: predicted value, yPred, standard deviation prediction, sd_yPred, limits confidence interval, lwr upr, outlier status. point annotated outlying, value outlier column 1, 0 otherwise. predicted values can visualized adjust smoothing parameter confidence interval using plot function. option outOnly, default value TRUE, enables visualizing plants annotated outliers. , visualizing one plant selected plants check prediction.   plots, black dots raw data, red line predicted curve, green lines lower upper limits confidence interval. Outlying points highlighted blue. annotated points can replaced NA studied trait using function removeSingleOut. creates new TP object.","code":"PhenovatorDat1 <- PhenovatorDat1[!PhenovatorDat1$pos %in% c(\"c24r41\", \"c7r18\", \"c7r49\"), ] ## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\", \"check3\", \"check4\")) # First select a subset of plants, for example here 8 plants. plantSel <- c(\"c1r17\",\"c13r17\",\"c6r51\",\"c21r24\",\"c5r54\",\"c21r32\",\"c14r48\",\"c5r26\")  # Then run on the subset resuVatorHTP <- detectSingleOut(TP = phenoTP,                                 trait = \"EffpsII\",                                 plotIds = plantSel,                                 confIntSize = 3,                                 nnLocfit = 0.1) plot(resuVatorHTP,      plotIds = \"c13r17\",      outOnly = FALSE) plot(resuVatorHTP,      plotIds = plantSel,      outOnly = FALSE) phenoTPOut <- removeSingleOut(phenoTP,                               resuVatorHTP) # Check one value annotated as outlier in the original TP object phenoTP[[16]][phenoTP[[16]]$plotId==\"c14r32\", c(\"plotId\", \"EffpsII\")] #>    plotId EffpsII #> 16 c14r32    0.63 # Check the same value in the new TP object phenoTPOut[[16]][phenoTPOut[[16]]$plotId==\"c14r32\", c(\"plotId\", \"EffpsII\")] #>    plotId EffpsII #> 16 c14r32    0.63"},{"path":"/articles/vignettesSite/OutlierSingleObs_HTP.html","id":"example-2","dir":"Articles > VignettesSite","previous_headings":"Illustration of the non-parametric function","what":"Example 2","title":"statgenHTP tutorial: 2. Outlier detection for single observations","text":"First TP object created containing time points. run function subset plants set parameters, using plotIds option. smoothing parameter nnLocfit set 0.5. curves linear medium smooth enough. confidence interval size confIntSize set 5 medium interval. prediction values can visualized adjust smoothing parameter confidence interval using plot function.   plots, black dots raw data, red line predicted curve, green lines lower upper limits confidence interval. Outlying points highlighted blue. possible run outlier detection without first checking first last time point outlying. useful cases, might give undesired results well example shows.  annotated points can replaced NA studied trait using function removeSingleOut. creates new TP object.","code":"phenoTParch <- createTimePoints(dat = PhenoarchDat1,                                 experimentName = \"Phenoarch\",                                 genotype = \"Genotype\",                                 timePoint = \"Date\",                                 plotId = \"pos\",                                 rowNum = \"Row\",                                 colNum = \"Col\") # First select a subset of plants, for example here 7 plants  plantSelArch <- c(\"c22r7\", \"c8r22\", \"c1r10\", \"c21r43\", \"c14r15\", \"c25r12\", \"c6r54\") # Then run on the subset resuArchHTP <- detectSingleOut(TP = phenoTParch,                                trait = \"LeafArea\",                                plotIds = plantSelArch,                                confIntSize = 5,                                nnLocfit = 0.5) plot(resuArchHTP,      plotIds = \"c14r15\",      outOnly = FALSE) plot(resuArchHTP,      plotIds = plantSelArch,      outOnly = FALSE) # Detect outliers without first checking edges. resuArchHTPNoEdges <- detectSingleOut(TP = phenoTParch,                                       trait = \"LeafArea\",                                       plotIds = \"c14r15\",                                       checkEdges = FALSE,                                       confIntSize = 5,                                       nnLocfit = 0.5) plot(resuArchHTPNoEdges) phenoTParchOut <- removeSingleOut(phenoTParch,                                   resuArchHTP) # Check one value annotated as outlier in the original TP object phenoTParch[[30]][phenoTParch[[30]]$plotId == \"c12r31\", c(\"plotId\", \"LeafArea\")] #>       plotId  LeafArea #> 16655 c12r31 0.2447164 # Check the same value in the new TP object phenoTParchOut[[30]][phenoTParchOut[[30]]$plotId == \"c12r31\", c(\"plotId\", \"LeafArea\")] #>       plotId  LeafArea #> 16655 c12r31 0.2447164"},{"path":"/articles/vignettesSite/OutlierSingleObs_HTP.html","id":"example-3","dir":"Articles > VignettesSite","previous_headings":"Illustration of the non-parametric function","what":"Example 3","title":"statgenHTP tutorial: 2. Outlier detection for single observations","text":"First TP object created containing time points. run function subset plants set parameters, using plotIds option. smoothing parameter nnLocfit set 1. curves almost linear strong smooth enough get accurate curve shape (line). confidence interval size confIntSize set 5 medium interval. prediction values can visualized adjust smoothing parameter confidence interval using plot function.   plots, black dots raw data, red line predicted curve, green lines lower upper limits confidence interval. Outlying points highlighted blue. annotated points can replaced NA studied trait using function removeSingleOut. creates new TP object.","code":"rootTP <- createTimePoints(dat = RootDat1,                            experimentName = \"UCL1\",                            genotype = \"Genotype\",                            timePoint = \"Time\",                            plotId = \"plantId\",                            rowNum = \"Strip\",                            colNum = \"Pos\") # First select a subset of plants, for example here 7 plants  plantSelRoot <- unique(RootDat1$plantId)[1:7] # Then run on the subset resuRootHTP <- detectSingleOut(TP = rootTP,                                trait = \"tipPos_y\",                                plotIds = plantSelRoot,                                confIntSize = 5,                                nnLocfit = 1) plot(resuRootHTP,      plotIds = \"A_03_2\",      outOnly = FALSE) plot(resuRootHTP,      plotIds = plantSelRoot,      outOnly = FALSE) rootTPOut <- removeSingleOut(rootTP,                              resuRootHTP) # Check one value annotated as outlier in the original TP object rootTP[[11127]][rootTP[[11127]]$plotId == \"A_01_2\", c(\"plotId\", \"tipPos_y\")] #>    plotId tipPos_y #> 42 A_01_2 6.014286 # Check the same value in the new TP object rootTPOut[[11127]][rootTPOut[[11127]]$plotId == \"A_01_2\", c(\"plotId\", \"tipPos_y\")] #>    plotId tipPos_y #> 42 A_01_2       NA"},{"path":[]},{"path":"/articles/vignettesSite/ParameterEstimation_HTP.html","id":"introduction","dir":"Articles > VignettesSite","previous_headings":"","what":"Introduction","title":"statgenHTP tutorial: 6. Estimation of parameters from time courses","text":"document presents final step HTP data analysis: extracting interesting parameters modeled time courses (Brien et al. 2020). example, second data set PhenoArch platform, maximum leaf area (P-splines) maximum leaf growth rate (first derivatives) relevant parameters (see figure ). assess variability genotypes difference treatments, e.g. water scenario decreased maximum leaf area?  also possible specify period parameter estimation. example, first data set Phenovator platform, can select period high light intensity (see figure ) estimate maximum slope period (first derivatives). interpreted recovery rate photosystem II efficiency.  parameters analyzed, example GxE analysis (see statgenGxE), genetic analysis (see statgenGWAS). functions described tutorial can applied corrected data, genotypic means (BLUEs BLUPS) (see statgenHTP tutorial: 3. Correction spatial trends), curves obtained P-splines hierarchical data model (see statgenHTP tutorial: 5. Modelling temporal evolution genetic signal), raw data. allows estimating maximum, minimum, mean, area curve (auc) percentile using predicted values, first second derivative, given period whole time course.","code":""},{"path":[]},{"path":"/articles/vignettesSite/ParameterEstimation_HTP.html","id":"example-1","dir":"Articles > VignettesSite","previous_headings":"Estimation of parameters from curves","what":"Example 1","title":"statgenHTP tutorial: 6. Estimation of parameters from time courses","text":"use fit.splineNumOut previously created (see statgenHTP tutorial: 4. Outlier detection series observations). contains P-spline prediction subset plants without time course outliers. estimate area curve trait. Note timeMin timeMax specified time scale used fitting spline, case time number scale.  subset genotypes, variability AUC psII efficiency. used genetic analysis maybe perform GWAS. Another example using derivative recovery period (end time course, light change) get maximum slope, maximum rate psII per time unit period.  Note: “min” “max” selected, output also contains parameter occurence time point, numerical timeNumber date timePoint. See table :","code":"subGenoVator <- c(\"G070\", \"G160\", \"G151\", \"G179\", \"G175\", \"G004\", \"G055\") paramVator1 <-    estimateSplineParameters(x = fit.splineNumOut,                            estimate = \"predictions\",                            what = \"AUC\",                            timeMin = 330,                            timeMax = 432,                            genotypes = subGenoVator)  plot(paramVator1, plotType = \"box\") paramVator2 <-   estimateSplineParameters(x = fit.splineNumOut,                            estimate = \"derivatives\",                            what = \"max\",                            timeMin = 210,                            timeMax = 312,                            genotypes = subGenoVator)  plot(paramVator2, plotType = \"box\")"},{"path":"/articles/vignettesSite/ParameterEstimation_HTP.html","id":"example-2","dir":"Articles > VignettesSite","previous_headings":"Estimation of parameters from curves","what":"Example 2","title":"statgenHTP tutorial: 6. Estimation of parameters from time courses","text":"example, use genotypic prediction (BLUPs, see statgenHTP tutorial: 3. Correction spatial trends) available spatPredArch data set. fit P-splines genotypic level using geno.decomp levels defined spatial model.  can estimate maximum value leaf area predicted P-splines:","code":"data(spatPredArch)   fit.splineGenoArch <- fitSpline(inDat = spatPredArch,                                  trait = \"predicted.values\",                                 knots = 15,                                 minNoTP = 18)  plot(fit.splineGenoArch,       genotypes = \"GenoA36\") paramArch1 <-   estimateSplineParameters(x = fit.splineGenoArch,                            estimate = \"predictions\",                            what = \"max\") plot(paramArch1, plotType = \"hist\")"},{"path":"/articles/vignettesSite/ParameterEstimation_HTP.html","id":"example-3","dir":"Articles > VignettesSite","previous_headings":"Estimation of parameters from curves","what":"Example 3","title":"statgenHTP tutorial: 6. Estimation of parameters from time courses","text":"example, use curves obtained P-splines hierarchical data model (see statgenHTP tutorial: 5. Modelling temporal evolution genetic signal). can use psHDM objects (, objects obtained fitSplineHDM() (fitted curves) predict.psHDM() (predicted curves)). example, use predicted curves. Although available information population, genotype plot levels, function extracts information genotype plot levels. Nevertheless, generally interested genotype level. example, paper Pérez-Valencia et al. (2022), extracted three features: maximum spatially corrected leaf area (estimated genotype-specific trajectories)   maximum speed rate (first derivative estimated genotype-specific trajectories)   area estimated genotype-specific deviations, follows","code":"## The data from the Phenovator platform have been corrected for spatial ## trends and outliers for single observations have been removed.  ## We need to specify the genotype-by-treatment interaction. ## Treatment: water regime (WW, WD). spatCorrectedArch[[\"treat\"]] <- substr(spatCorrectedArch[[\"geno.decomp\"]],                                       start = 1, stop = 2) spatCorrectedArch[[\"genoTreat\"]] <-   interaction(spatCorrectedArch[[\"genotype\"]],              spatCorrectedArch[[\"treat\"]], sep = \"_\")  ## Fit P-Splines Hierarchical Curve Data Model for all genotypes. fit.psHDM  <- fitSplineHDM(inDat = spatCorrectedArch,                            trait = \"LeafArea_corr\",                            pop = \"geno.decomp\",                            genotype = \"genoTreat\",                            plotId = \"plotId\",                            difVar = list(geno = FALSE, plot = FALSE),                            smoothPop = list(nseg = 5, bdeg = 3, pord = 2),                            smoothGeno = list(nseg = 5, bdeg = 3, pord = 2),                            smoothPlot = list(nseg = 5, bdeg = 3, pord = 2),                            weights = \"wt\",                            trace = FALSE,                            useTimeNumber = FALSE)  ## Predict the P-Splines Hierarchical Curve Data Model on a dense grid ## Only predictions (and standard errors) are obtained   ## at the population and genotype levels pred.psHDM <- predict(object = fit.psHDM,                       newtimes = seq(min(fit.psHDM$time[[\"timeNumber\"]]),                                      max(fit.psHDM$time[[\"timeNumber\"]]),                                      length.out = 100),                       pred = list(pop = TRUE, geno = TRUE, plot = TRUE),                       se = list(pop = TRUE, geno = TRUE, plot = FALSE),                       trace = FALSE) ##  From estimated genotype-specific trajectories plot(pred.psHDM, plotType = \"popGenoTra\", themeSizeHDM = 4) ## Estimate maximum spatially corrected leaf area. paramArch1 <- estimateSplineParameters(x = pred.psHDM,                                      what = \"max\",                                      fitLevel = \"geno\",                                      estimate = \"predictions\")  ## Create a boxplot of the estimates. plot(paramArch1, plotType = \"box\") ## From the first derivative of the estimated genotype-specific trajectories plot(pred.psHDM, plotType = \"popGenoDeriv\", themeSizeHDM = 4) ## Estimate maximum speed rate  ## We are interested on a local maximum (before timeNumber 2500) paramArch2 <- estimateSplineParameters(x = pred.psHDM,                                      what = \"max\",                                      fitLevel = \"geno\",                                      estimate = \"derivatives\",                                      timeMax = 2500)  ## Create a boxplot of the estimates. plot(paramArch2, plotType = \"box\") ## From the estimated genotype-specific deviations plot(pred.psHDM, plotType = \"genoDev\", themeSizeHDM = 4) ## Estimate area under the curve (AUC). paramArch3 <- estimateSplineParameters(x = pred.psHDM,                                      what = \"AUC\",                                      fitLevel = \"genoDev\",                                      estimate = \"predictions\")  ## Create a boxplot of the estimates. plot(paramArch3, plotType = \"box\")"},{"path":"/articles/vignettesSite/ParameterEstimation_HTP.html","id":"example-4","dir":"Articles > VignettesSite","previous_headings":"Estimation of parameters from curves","what":"Example 4","title":"statgenHTP tutorial: 6. Estimation of parameters from time courses","text":"example, use raw data RootPhAir, corrected individually outlying observations (see statgenHTP tutorial: 2. Outlier detection single observations) time course outliers (see statgenHTP tutorial: 4. Outlier detection Time course). fit P-splines plant level subset genotypes. estimate mean growth rate using = \"mean\" subset genotypes:","code":"subGenoRoot <- c( \"2\",\"6\",\"8\",\"9\",\"10\",\"520\",\"522\") fit.splineRootOut <- fitSpline(inDat = noCorrectedRootOut,                                trait = \"tipPos_y\",                                knots = 10,                                genotypes = subGenoRoot,                                minNoTP = 0,                                useTimeNumber = TRUE,                                timeNumber = \"thermalTime\") paramRoot1 <-   estimateSplineParameters(x = fit.splineRootOut,                            estimate = \"derivatives\",                            what = \"mean\")  plot(paramRoot1, plotType = \"box\")"},{"path":[]},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"introduction","dir":"Articles > VignettesSite","previous_headings":"","what":"Introduction","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"Phenotyping facilities display spatial heterogeneity. example, spatial variability incident light can go 100% pots within greenhouse (Cabrera-Bosquet et al. 2016). Taking account spatial trends prerequisite precise estimation genetic treatment effects. way field trials, platform experiments obey standard principles experimental design statistical modeling. Popular mixed models separate spatial trends treatment genetic effects, rely use autoregressive correlation functions defined rows columns (AR1×AR1) model local trends (Cullis, Smith, Coombes 2006). models sometimes difficult fit selection best model complicated, therefore preventing automated phenotypic analysis series trials. attractive alternative use 2-dimensional P-spline surfaces, SpATS model (Spatial Analysis Trials using Splines, (Rodríguez-Álvarez et al. 2018)). model corrects spatial trends, row column effects advantage avoiding model selection step. also provides user graphical outputs easy interpret. proven good alternative classical AR1×AR1 modeling field (Velazco et al. 2017). also suitable phenotyping platform data tested several datasets EPPN2020 project. aim document accurately separate genetic effects spatial effects time point. provide user either genotypic values corrected values can used modeling. brief, separately measurement time tt, spatial model fitted trait yty_t, yt=1Mβ0t+Xhβht+Xqβqt+Zgcgt+ft(u,v)+Zrcrt+Zccct+ϵty_t = 1_M \\beta_{0t} +  X_h \\beta_{ht} + X_q \\beta_{qt} + Z_g c_{gt} + f_t(u,v) + Z_r c_{rt} + Z_c c_{ct} + \\epsilon_t briefly, 1Mβ0t1_M \\beta_{0t}, intercept, XhβhtX_h \\beta_{ht}, corresponds factors/covariates whose effects interested modeling, XqβqtX_q \\beta_{qt}, corresponds factors/covariates whose effects interested removing, ZgcgtZ_g c_{gt}, corresponds genotypic effects, ft(u,v)+Zrcrt+Zccctf_t(u,v) + Z_r c_{rt} + Z_c c_{ct}, represents spatial effects, ft(u,v)f_t(u,v) corresponding spatial function, e.g. PSANOVA function SpATS package, ZrcrtZ_r c_{rt} ZccctZ_c c_{ct} represent design matrices effects random row column effects respectively, ϵt\\epsilon_t, residual. details see Pérez-Valencia et al. (2022). tutorial describes detail perform analyses correct spatial trends using different modeling engines extract results models.","code":""},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"modeling-with-spatial-terms-using-example-1","dir":"Articles > VignettesSite","previous_headings":"","what":"Modeling with spatial terms using Example 1","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"use TP object phenoTPOut annotated time points replaced NA considered outliers. (see statgenHTP tutorial: 2. Outlier detection single observations). creating TP object, model can fitted data. done using function fitModels, uses two different engines fitting models, namely SpATS (Rodríguez-Álvarez et al. 2018) ASReml (Butler et al. 2017). models row column coordinates, SpATS default engine (see section 2.1). can overruled specifying function parameter engine using ASReml spatial models (see section 2.2). row column coordinates available, ASReml used modeling without spatial components (see section 3). Finally, possible decompose genotypic variance using, example, treatment effect (see section 4). output fitModels object class fitMod, list fitted models one item time point model fitted .","code":""},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"SpATS","dir":"Articles > VignettesSite","previous_headings":"Modeling with spatial terms using Example 1","what":"Spatial model using SpATS","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"SpATS used modeling, extra spatial term included model. spatial component composed using PSANOVA function SpATS package uses 2-dimensional smoothing P-splines described Lee, Durbán, Eilers (2013) Rodríguez-Álvarez et al. (2018). See help(PSANOVA, SpATS) detailed description. Extra fixed effects may fitted using option extraFixedFactors. model can also fitted following resolvable row-column design setting useRepId TRUE. model specifications listed table simplified model. models , fixed effects indicated italics whereas random effects indicated bold. “genotype” can fitted random fixed effect using option . option useCheck allows treating genotypes check: splits column “genotype” two columns follows: NOTE: possible use combination check genotype random.","code":""},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"calling-spats","dir":"Articles > VignettesSite","previous_headings":"Modeling with spatial terms using Example 1 > Spatial model using SpATS","what":"Calling SpATS","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"Using TP object phenoTPOut previous vignette, model time points trait “EffpsII” can now fitted data follows. Since engine supplied option, SpATS used fitting following model: EffpsII = μ\\mu + genotype + rowId + colId + ϵ\\epsilon output fitMod object, list containing one fitted model per time point. Note supplying argument function, genotype set random. can run genotype fixed using : EffpsII = μ\\mu + genotype + rowId + colId + ϵ\\epsilon model can extended including extra main fixed effects, include extra experimental design factors: EffpsII = μ\\mu + repId + Image_pos + genotype + rowId + colId + ϵ\\epsilon can extended including check genotypes: EffpsII = μ\\mu + repId + Image_pos + check + genoCheck + rowId + colId + ϵ\\epsilon Finally, model following resolvable row-column design can fitted: including effects row column nested within replicate. EffpsII = μ\\mu + repId + genotype + repId:rowId + repId:colId + ϵ\\epsilon","code":"## Fit a model for a few time points. modPhenoSp <- fitModels(TP = phenoTPOut,                          trait = \"EffpsII\",                         timePoints = seq(from = 1, to = 73, by = 5))  summary(modPhenoSp) #> Models in modPhenoSp where fitted for experiment Phenovator. #>  #> It contains 15 time points. #> The models were fitted using SpATS. ## Fit a model for a single time point. modPhenoSpFix <- fitModels(TP = phenoTPOut,                             trait = \"EffpsII\",                            timePoints = 3,                            what = \"fixed\") ## Fit a model for a single time point with extra fixed factors. modPhenoSpCov <- fitModels(TP = phenoTPOut,                             trait = \"EffpsII\",                            extraFixedFactors = c(\"repId\", \"Image_pos\"),                             timePoints = 3) ## Fit a model for a single time point with extra fixed effects and check genotypes. modPhenoSpCheck <- fitModels(TP = phenoTPOut,                               trait = \"EffpsII\",                              extraFixedFactors = c(\"repId\", \"Image_pos\"),                              useCheck = TRUE,                              timePoints = 3) ## Fit a model for a single time point. modPhenoSpRCD <- fitModels(TP = phenoTPOut,                            trait = \"EffpsII\",                            timePoints = 3,                            useRepId = TRUE)"},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"model-plots","dir":"Articles > VignettesSite","previous_headings":"Modeling with spatial terms using Example 1 > Spatial model using SpATS","what":"Model plots","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"first type plot can made fitted models, spatial plot per time point using plotType = \"spatial\". consists plots, spatial plots raw data, fitted values, residuals either BLUEs BLUPs, histogram BLUEs BLUPs. SpATS used modeling extra plot fitted spatial trend included (see (Rodríguez-Álvarez et al. 2018) (Velazco et al. 2017) interpretation). Note spatial plots can made spatial information, .e. rowNum colNum, available TP object.  assessing importance fitted spatial trends one glance, comparison time points, plot fitted spatial trend can displayed ratio raw phenotypic mean: SpatTrend(proportion) = Estimated SpatTrend / mean(raw EffpsII). case, scale percentage min/max adjusted based time points used least 10%. empirical threshold allows visualizing fitted trends relatively small large importance.  also possible create time lapse ratio spatial trends time. scale previously described. time lapse always written output file. illustration three time points:","code":"plot(modPhenoSp,      timePoints = 36,      plotType = \"spatial\",      spaTrend = \"raw\") plot(modPhenoSp,      timePoints = 36,      plotType = \"spatial\",      spaTrend = \"percentage\") plot(modPhenoSp,       plotType = \"timeLapse\",      outFile = \"TimeLapse_modPhenoSp.gif\")"},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"extracting-model-results","dir":"Articles > VignettesSite","previous_headings":"Modeling with spatial terms using Example 1 > Spatial model using SpATS","what":"Extracting model results","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"results can extracted shown table . first column contains function names. second column contains short description result extracted , needed, states modeling engines can extracted. default, functions run time points. possible select using timePoints. ratio effective dimensions can also extracted using EDType = \"ratio\" getEffDims function. output function getGenoPred list two dataframes: “genoPred” contains predicted values tested genotypes “checkPred” contains predicted values check genotypes, useCheck = TRUE model. “checkPred” empty useCheck = FALSE. genotypic predictions test genotypes one time point displayed table like following: corrected values obtained considering estimated sources variation interest. , correction follows procedure described (Welham et al. 2004). propose partition explanatory variables three groups: () predicted values required (.e. population genotypic effects), (ii) averaged (.e. experimental factors effects), (iii) ignored (.e. spatial effects). corrected trait obtained follows (simplified terms, full explanation see Pérez et al. (prep)): ỹt=μ̂t+genôt+fixed̂t+ϵ̂t\\tilde{y}_t = \\hat \\mu_t + \\widehat{geno}_t + \\widehat{fixed}_t + \\hat{\\epsilon}_t fixed̂t\\widehat{fixed}_t fixed covariates interest (e.g. population effect). allows keeping data experimental unit level (plants) degrees freedom modeling (e.g. time course modeling estimation time course parameter(s)). NOTE: estimated fixed effects included extraFixedFactors removed corrected phenotype (ỹt\\tilde{y}_t). corrected values one time point displayed table like following:","code":"## Extract the genotypic predictions for one time point:  genoPredSp <- getGenoPred(modPhenoSp, timePoints = 6) ## Extract the corrected values for one time point:  spatCorrSp <- getCorrected(modPhenoSp, timePoints = 6) ## Extract model components:  varianceSp <- getVar(modPhenoSp) heritSp    <- getHerit(modPhenoSp) effDimSp   <- getEffDims(modPhenoSp)"},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"plotting-model-results","dir":"Articles > VignettesSite","previous_headings":"Modeling with spatial terms using Example 1 > Spatial model using SpATS","what":"Plotting model results","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"Different plots can displayed fitMod object. first one rawPred, plots raw data (colored dots, one color per plotId) overlaid predicted values (black dots) fitted model. One plot made per genotype plotId. plots put together 5×5 grid per page. Using parameter genotypes, subset genotypes plotted. default, data plotted dots can changed setting plotLine = TRUE.  second one corrPred, plots spatially corrected data (colored dots, one color per plotId) overlaid predicted values fitted model (black dots). One plot made per genotype plotId. plots put together 5×5 grid per page. Using parameter genotypes, subset genotypes plotted. default, data plotted dots can changed setting plotLine = TRUE.  Note check genotypes used modeling, two previous plot types (rawPred corrPred), parameter plotChecks set TRUE display check genotypes. last three types plot display different model parameters time. Plot type herit plots heritability time. geno.decomp used fitting model, heritabilities plotted level genotype groups single plot (see section 4). scale plot can adjusted using yLim.  Plot type variance plots residual, column row variances time. plots can serve diagnostics experiment. scale plot can adjusted using yLim.  Plot type effDim plots effective dimension models fitted using SpATS time. default, spatial components plotted. can restricted using option whichED. scale plot can adjusted using yLim.  effective dimensions also known effective degrees freedom. can interpreted measure complexity corresponding component: effective dimension one component large, indicates strong spatial trends direction. better comparison components, ratio effective dimensions vs. total dimensions can used. value 0, spatial trend, 1, strong spatial trend (almost degrees freedom used model ). table gives overview effective dimensions explanation meaning.","code":"plot(modPhenoSp,       plotType = \"rawPred\",      genotypes = c(\"check1\", \"check2\", \"G007\", \"G058\")) plot(modPhenoSp,       plotType = \"corrPred\",      genotypes = c(\"check1\", \"check2\", \"G007\", \"G058\") ) plot(modPhenoSpCheck,       plotType = \"rawPred\",      plotChecks = TRUE,      genotypes = c(\"check1\", \"check2\", \"G007\", \"G058\")) plot(modPhenoSp,       plotType = \"herit\",      yLim = c(0.5, 1)) plot(modPhenoSp,       plotType = \"variance\",      yLim = c(0, 0.00125)) plot(modPhenoSp,       plotType = \"effDim\",      whichED = c(\"colId\", \"rowId\", \"fColRow\",\"colfRow\", \"surface\"),      EDType = \"ratio\")"},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"ASReml","dir":"Articles > VignettesSite","previous_headings":"Modeling with spatial terms using Example 1","what":"Spatial model with ASReml","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"ASReml used modeling spatial = TRUE, four models fitted different random terms covariance structures. best model determined based goodness--fit criterion, AIC, 20% time points least 10 time points. best model run time points. SpATS, ASReml models can extended fitting extra fixed factors using option extraFixedFactors. Note moment, running ASReml-R version 4 higher. models , fixed effects indicated italics whereas random effects indicated bold. “genotype” can fitted random fixed effect using option . option useCheck displayed table works SpATS: treating genotypes check (see section 2.1 details). Calling ASReml done changing engine option fitModels function. best spatial model : trait = genotype + row + col + ϵ\\epsilon, spatial component: AR1(rowId):AR1(colId). selected using 10 time points. Plotting extracting results done way SpATS. examples. Note engine ASReml, heritability calculated using formula provided (Cullis, Smith, Coombes 2006).","code":"if (requireNamespace(\"asreml\", quietly = TRUE)) {   ## Fit a model on few time points with spatial function:   modPhenoSpAs <- fitModels(TP = phenoTPOut,                              trait = \"EffpsII\",                             timePoints = seq(from = 1, to = 73, by = 5),                             engine = \"asreml\",                             spatial = TRUE)    summary(modPhenoSpAs) } if (requireNamespace(\"asreml\", quietly = TRUE)) {   spatCorrSpAs <- getCorrected(modPhenoSpAs, timePoints = 6) } if (requireNamespace(\"asreml\", quietly = TRUE)) {   plot(modPhenoSpAs,         plotType = \"herit\",        yLim = c(0.5, 1)) }"},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"ASRemlnoSP","dir":"Articles > VignettesSite","previous_headings":"","what":"Modeling without spatial terms with ASReml","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"row column coordinates available, ASReml can used modeling. case, model simply uses genotype extraFixedFactors, . models , fixed effects indicated italics whereas random effects indicated bold. genotype can fitted random fixed effect using option . option useCheck displayed table, works SpATS (see section 3.1).","code":"## Fit a model on few time points without spatial function. modPhenoAs <- fitModels(TP = phenoTPOut,                          trait = \"EffpsII\",                         timePoints = seq(from = 1, to = 73, by = 5),                         engine = \"asreml\",                         spatial = FALSE)"},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"genodecomp","dir":"Articles > VignettesSite","previous_headings":"","what":"Modeling with decomposition of genotypes using Example 2","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"experimental treatment applied, example, water scenario, required decompose genotypic variance levels treatment. following example, two water scenarios, well-watered (WW) water deficit (WD), applied. Thus, instead modeling one genotypic variance, one genotypic variance per treatment. part, describe briefly specific modeling statgenHTP package using second example data set. use TP object phenoTParchOut annotated time points replaced NA (see statgenHTP tutorial: 2. Outlier detection single observations). can first check number time points containing data given trait: case, time point “2017-05-14” 455 observations, less half total number observations. can bias modeling time point one may want remove running spatial analysis.","code":"countValid(phenoTParchOut, \"LeafArea\") #> 2017-04-13 2017-04-14 2017-04-15 2017-04-16 2017-04-17 2017-04-18 2017-04-19  #>        815       1346       1666       1665       1669       1671       1192  #> 2017-04-20 2017-04-21 2017-04-22 2017-04-23 2017-04-24 2017-04-25 2017-04-26  #>       1532        823       1673       1617       1221       1672       1072  #> 2017-04-27 2017-04-28 2017-04-29 2017-04-30 2017-05-01 2017-05-02 2017-05-03  #>       1673       1134       1137       1074       1134       1137       1092  #> 2017-05-04 2017-05-05 2017-05-06 2017-05-07 2017-05-08 2017-05-09 2017-05-10  #>       1449        782       1058       1240       1034        665        885  #> 2017-05-11 2017-05-12 2017-05-13 2017-05-14 2017-05-15  #>       1022       1313       1044        452        840 # getTimePoints(phenoTParchOut) phenoTParchOut <- removeTimePoints(phenoTParchOut,                                    timePoints = 32)"},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"modeling","dir":"Articles > VignettesSite","previous_headings":"Modeling with decomposition of genotypes using Example 2","what":"Modeling","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"Using geno.decomp option modeling two main consequences model: geno.decomp variable(s) added fixed main effect grouping factor separate variance components genotypes level grouping decomposing factor (extraFixedFactors /check, , SpATS ). table provides one example three models: NOTE: moment, possible use combination geno.decomp = \"fixed\". Using Phenoarch example, apply genotype decomposition using variables “Scenario” “population”:","code":"modPhenoSpGD <- fitModels(TP = phenoTParchOut,                           trait = \"LeafArea\",                           geno.decomp = c(\"Scenario\", \"population\"),                           timePoints = seq(from = 1, to = 33, by = 3))"},{"path":"/articles/vignettesSite/SpatialModel_HTP.html","id":"output","dir":"Articles > VignettesSite","previous_headings":"Modeling with decomposition of genotypes using Example 2","what":"Output","title":"statgenHTP tutorial: 3. Correction for spatial trends","text":"Extracting results plotting models work exactly previously. example, spatial plot data set looks like following one time point:  significant differences display results plots. highlighted . predictions two values per genotype, one level decomposition geno.decomp, “Scenario_population”, illustrated table three genotypes predicted SpATS model modPhenoSpGD. heritabilities now given geno.decomp levels plot now displays one line per level.  prediction corrected data plots display one plot per combination genotype × geno.decomp.","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emilie J Millet. Author. Maria Xose Rodriguez Alvarez. Author. Diana Marcela Perez Valencia. Author. Isabelle Sanchez. Author. Nadine Hilgert. Author. Bart-Jan van Rossum. Author, maintainer. Fred van Eeuwijk. Author. Martin Boer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Millet E, Rodriguez Alvarez M, Perez Valencia D, Sanchez , Hilgert N, van Rossum B, van Eeuwijk F, Boer M (2025). statgenHTP: High Throughput Phenotyping (HTP) Data Analysis. R package version 1.0.8, https://biometris.github.io/statgenHTP/index.html.","code":"@Manual{,   title = {statgenHTP: High Throughput Phenotyping (HTP) Data Analysis},   author = {Emilie J Millet and Maria Xose {Rodriguez Alvarez} and Diana Marcela {Perez Valencia} and Isabelle Sanchez and Nadine Hilgert and Bart-Jan {van Rossum} and Fred {van Eeuwijk} and Martin Boer},   year = {2025},   note = {R package version 1.0.8},   url = {https://biometris.github.io/statgenHTP/index.html}, }"},{"path":"/index.html","id":"statgenhtp","dir":"","previous_headings":"","what":"An R package for analysis of High Throughput Phenotyping data","title":"An R package for analysis of High Throughput Phenotyping data","text":"statgenHTP developed easy--use package analyzing data coming high throughput phenotyping (HTP) platform experiments. package provides many options plotting exporting results analyses. developed within EPPN2020 project meet needs automated analyses HTP data.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for analysis of High Throughput Phenotyping data","text":"Install CRAN: Install latest development version GitHub (requires remotes package):","code":"install.packages(\"statgenHTP\") remotes::install_github(\"Biometris/statgenHTP\", ref = \"develop\", dependencies = TRUE)"},{"path":"/reference/PhenoarchDat1.html","id":null,"dir":"Reference","previous_headings":"","what":"Greenhouse data for a maize experiment in the PhenoArch platform. — PhenoarchDat1","title":"Greenhouse data for a maize experiment in the PhenoArch platform. — PhenoarchDat1","text":"dataset containing data greenhouse experiment maize Phenoarch platform (INRAE, France, Cabrera-Bosquet et al. 2016). consists one experiment 1,671 plants grown greenhouse two water scenarios, well-watered (WW) water deficit (WD). two populations genotypes, panel 1 panel 2. Panel 1 contains 60 genotypes 14 replicates: 7 WW 7 WD. Panel 2 contains 30 genotypes 8 replicates, 4 WW 4 WD. studied trait leaf area extracted pictures time (LeafArea). Plants pictured every day 33 days. dataset kindly provided Llorenç Cabrera-Bosquet Claude Welcker.","code":""},{"path":"/reference/PhenoarchDat1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Greenhouse data for a maize experiment in the PhenoArch platform. — PhenoarchDat1","text":"","code":"PhenoarchDat1"},{"path":"/reference/PhenoarchDat1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Greenhouse data for a maize experiment in the PhenoArch platform. — PhenoarchDat1","text":"data.frame 42,536 rows 14 columns: Date Date measurement pos Unique pot using rowcol coordinate Genotype Genotype Scenario Water regime, WW WD population Panel 1 2 Row Pot position conveyor belt (.e. row coordinate) Col Line conveyor belt (.e. column coordinate) Biomass Biomass picture LeafArea Leaf area picture PlantHeight Plant height picture LeafCount Number leaves manually scored phyllocron Leaf emission rate","code":""},{"path":"/reference/PhenoarchDat1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Greenhouse data for a maize experiment in the PhenoArch platform. — PhenoarchDat1","text":"Cabrera-Bosquet, Llorenç, Fournier Christian, Brichet Nicolas, Welcker Claude, Suard Benoît, Tardieu François. 2016. “High-throughput estimation incident light, light interception radiation-use efficiency thousands plants phenotyping platform.” New Phytologist 212 (1): 269-81. doi:10.1111/nph.14027","code":""},{"path":"/reference/PhenovatorDat1.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth chamber data for an Arabidopsis experiment in the Phenovator platform. — PhenovatorDat1","title":"Growth chamber data for an Arabidopsis experiment in the Phenovator platform. — PhenovatorDat1","text":"dataset containing data growth chamber experiment Arabidopsis Phenovator platform (WUR, Netherlands, Flood et al. 2016). consists one experiment 1,440 plants grown growth chamber. number tested genotypes 192 6 7 replicates per genotype. Four reference genotypes also tested 15 30 replicates. studied trait photosystem II efficiency (EffpsII) extracted pictures time (van Rooijen et al. 2017). dataset kindly provided René Boesten Mark Aarts.","code":""},{"path":"/reference/PhenovatorDat1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth chamber data for an Arabidopsis experiment in the Phenovator platform. — PhenovatorDat1","text":"","code":"PhenovatorDat1"},{"path":"/reference/PhenovatorDat1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Growth chamber data for an Arabidopsis experiment in the Phenovator platform. — PhenovatorDat1","text":"data.frame 103,839 rows 10 columns: Genotype Genotypes Basin Table experiment Replicate Block define sowing post-blocking. full-resolvable blocks. Image_pos Position camera x Row coordinate y Column coordinate Sowing_Position Unique pot ID timepoints time picture EffpsII Efficiency photosystem II pos Unique pot ID using rowcol coordinates","code":""},{"path":"/reference/PhenovatorDat1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Growth chamber data for an Arabidopsis experiment in the Phenovator platform. — PhenovatorDat1","text":"Rooijen, Roxanne van, Willem Kruijer, René Boesten, Fred . van Eeuwijk, Jeremy Harbinson, Mark G. M. Aarts. 2017. “Natural Variation YELLOW SEEDLING1 Affects Photosynthetic Acclimation Arabidopsis Thaliana.” Nature Communications 8 (1). doi:10.1038/s41467-017-01576-3 Flood, Pádraic J., Willem Kruijer, Sabine K. Schnabel, Rob van der Schoor, Henk Jalink, Jan F. H. Snel, Jeremy Harbinson, Mark G. M. Aarts. 2016. “Phenomics Photosynthesis, Growth Reflectance Arabidopsis Thaliana Reveals Circadian Long-Term Fluctuations Heritability.” Plant Methods 12 (1): 14. doi:10.1186/s13007-016-0113-y","code":""},{"path":"/reference/RootDat1.html","id":null,"dir":"Reference","previous_headings":"","what":"Greenhouse data for an experiment in the RootPhAir platform. — RootDat1","title":"Greenhouse data for an experiment in the RootPhAir platform. — RootDat1","text":"dataset containing greenhouse data RootPhAir platform (UCLouvain, Belgium). consists one experiment one aeroponic tanks 340 maize plants. studied traits root tip coordinates y x axis, extracted pictures time. Plants pictured every 2 hours 10 days. dataset kindly provided Xavier Draye.","code":""},{"path":"/reference/RootDat1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Greenhouse data for an experiment in the RootPhAir platform. — RootDat1","text":"","code":"RootDat1"},{"path":"/reference/RootDat1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Greenhouse data for an experiment in the RootPhAir platform. — RootDat1","text":"data.frame 16,275 rows 10 columns: Exp Experiment number thermalTime Thermal time cumulated Genotype Genotype plantId Unique pot using tank rowcol coordinate Tank Tank B Strip Number strip five plants (.e. row coordinate) Pos Position within th strip (.e. column coordinate) tipPos_x Position root tip x axis tipPos_y Position root tip y axis Time Time measurement","code":""},{"path":"/reference/as.data.frame.TP.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce TP object to data.frame — as.data.frame.TP","title":"Coerce TP object to data.frame — as.data.frame.TP","text":"Function converting object class TP data.frame.","code":""},{"path":"/reference/as.data.frame.TP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce TP object to data.frame — as.data.frame.TP","text":"","code":"# S3 method for class 'TP' as.data.frame(x, ...)"},{"path":"/reference/as.data.frame.TP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce TP object to data.frame — as.data.frame.TP","text":"x object class TP. ... Ignored.","code":""},{"path":"/reference/as.data.frame.TP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce TP object to data.frame — as.data.frame.TP","text":"data.frame containing data.frames time points TP object bound together.","code":""},{"path":[]},{"path":"/reference/as.data.frame.TP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce TP object to data.frame — as.data.frame.TP","text":"","code":"## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49 ## Convert phenoTP to data.frame. phenoDat <- as.data.frame(phenoTP)"},{"path":"/reference/countValid.html","id":null,"dir":"Reference","previous_headings":"","what":"Count valid observations per time point for a given trait — countValid","title":"Count valid observations per time point for a given trait — countValid","text":"Count valid observations per time point given trait.","code":""},{"path":"/reference/countValid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count valid observations per time point for a given trait — countValid","text":"","code":"countValid(TP, trait)"},{"path":"/reference/countValid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count valid observations per time point for a given trait — countValid","text":"TP object class TP. trait character string indicating trait valid observations counted.","code":""},{"path":"/reference/countValid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count valid observations per time point for a given trait — countValid","text":"named numerical vector number valid observations per time point .","code":""},{"path":"/reference/countValid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count valid observations per time point for a given trait — countValid","text":"","code":"## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49 ## Count valid observations for EffpsII per time point. validPheno <- countValid(phenoTP, trait = \"EffpsII\") head(validPheno) #> 2018-05-31 16:37:00 2018-06-01 09:07:00 2018-06-01 11:37:00 2018-06-01 14:37:00  #>                1410                1391                1407                1413  #> 2018-06-01 16:37:00 2018-06-02 09:07:00  #>                1413                1411"},{"path":"/reference/countValidPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Count valid observations per plotId for a given trait — countValidPlot","title":"Count valid observations per plotId for a given trait — countValidPlot","text":"Count valid observations per plotId given trait.","code":""},{"path":"/reference/countValidPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count valid observations per plotId for a given trait — countValidPlot","text":"","code":"countValidPlot(TP, trait, plotIds = NULL)"},{"path":"/reference/countValidPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count valid observations per plotId for a given trait — countValidPlot","text":"TP object class TP. trait character string indicating trait valid observations counted. plotIds character vector indicating plotIds valid observations checked. NULL valid observations counted plotIds TP.","code":""},{"path":"/reference/countValidPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count valid observations per plotId for a given trait — countValidPlot","text":"named numerical vector number valid observations per plotId.","code":""},{"path":"/reference/countValidPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count valid observations per plotId for a given trait — countValidPlot","text":"","code":"## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49 ## Count valid observations for EffpsII for a subset of plots. countValidPlot(phenoTP,                trait = \"EffpsII\",                plotIds = c(\"c12r22\", \"c24r41\", \"c14r32\")) #> c12r22 c24r41 c14r32  #>     53     16     73"},{"path":"/reference/createTimePoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an object of class TP — createTimePoints","title":"Create an object of class TP — createTimePoints","text":"Convert data.frame object class TP (Time Points). function converts data.frame object class TP following steps: Quality control input data. example, warnings given 50% observations missing plant. Rename columns default column names used functions statgenHTP package. example, column data containing variety/accession/genotype renamed “genotype.” Original column names stored attribute individual data.frames TP object. Convert column types default column types. example, column “genotype” converted factor “rowNum” numeric column. Convert column containing time time format. needed, time format can provided timeFormat. example, date/time input form “day/month/year hour:minute”, use \"%d/%m/%Y %H:%M\". full list abbreviations see R package strptime. input time numeric value, function convert time 01-01-1970. addCheck = TRUE, genotypes listed checkGenotypes reference genotypes (check). add column check value \"noCheck\" genotypes checkGenotypes name genotypes checkGenotypes. column genoCheck also added names genotypes checkGenotypes NA checkGenotypes. columns necessary fitting models data includes check genotypes, e.g. reference genotypes highly replicated case augmented design. Split data separate data.frames time point. TP object list data.frames data.frame contains data single time point. one time point output list one item. Add data.frame columns timeNumber timePoint attribute “timePoints” TP object. data.frame can used referencing time points unique number. Note plotId needs unique identifier plot plant. occur per time point.","code":""},{"path":"/reference/createTimePoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an object of class TP — createTimePoints","text":"","code":"createTimePoints(   dat,   experimentName,   genotype,   timePoint,   timeFormat = NULL,   plotId,   repId = NULL,   rowNum = NULL,   colNum = NULL,   addCheck = FALSE,   checkGenotypes = NULL )"},{"path":"/reference/createTimePoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an object of class TP — createTimePoints","text":"dat data.frame. experimentName character string, name experiment. Stored data used default plot titles. genotype character string indicating column dat containing genotypes. timePoint character string indicating column dat containing time points. timeFormat character string indicating input format time points. E.g. date/time input form day/month/year hour:minute, use \"%d/%m/%Y %H:%M\". full list abbreviations see strptime. NULL, best guess done based input. plotId character string indicating column dat containing plotId. unique identifier per plot/plant per time point. repId character string indicating column dat containing replicates. rowNum character string indicating column dat containing row number plot. colNum character string indicating column dat containing column number plot. addCheck column check added output? TRUE, checkGenotypes NULL. checkGenotypes character vector containing genotypes used checks experiment.","code":""},{"path":"/reference/createTimePoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an object of class TP — createTimePoints","text":"object class TP. list , per time point input, data.frame containing data time point. data.frame columns timeNumber timePoint added attribute timePoints data. data.frame can used referencing timePoints number.","code":""},{"path":[]},{"path":"/reference/createTimePoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an object of class TP — createTimePoints","text":"","code":"## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\",\"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49 summary(phenoTP) #> phenoTP contains data for experiment Phenovator. #>  #> It contains 73 time points. #> First time point: 2018-05-31 16:37:00  #> Last time point: 2018-06-18 16:37:00  #>  #> The following genotypes are defined as check genotypes: check1, check2, check3, check4."},{"path":"/reference/detectSerieOut.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect outliers for series of observations — detectSerieOut","title":"Detect outliers for series of observations — detectSerieOut","text":"Function detecting strange time courses. function uses estimates spline coefficients per time course (typically per plant). Correlations coefficient vectors calculated identify outlying time courses, .e., plants. outlying time course low correlation majority time courses. support analysis correlations, principal component analysis done plant (time course) spline coefficient matrix. PCA plot plant scores show outlying plants. Finally pairwise-ratios slopes linear model fitted spline coefficients computed. Plants tagged average pairwise-ratio lower given threshold (thrSlope).","code":""},{"path":"/reference/detectSerieOut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect outliers for series of observations — detectSerieOut","text":"","code":"detectSerieOut(   corrDat,   predDat,   coefDat,   trait,   genotypes = NULL,   geno.decomp = NULL,   thrCor = 0.9,   thrPca = 30,   thrSlope = 0.7 )"},{"path":"/reference/detectSerieOut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect outliers for series of observations — detectSerieOut","text":"corrDat data.frame corrected spatial data. predDat data.frame predicted data fitted spline. coefDat data.frame coefficients fitted spline. trait character string indicating trait detect outliers. genotypes character vector indicating genotypes detect outliers. NULL, outlier detection done genotypes. geno.decomp character vector indicating variables use group genotypic variance model. thrCor numerical value used threshold determining outliers based correlation plots. thrPca numerical value used threshold determining outliers based angles (degrees) PCA scores. thrSlope numerical value used threshold determining outliers based slopes.","code":""},{"path":"/reference/detectSerieOut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect outliers for series of observations — detectSerieOut","text":"object class serieOut, data.frame outlying series observations.","code":""},{"path":[]},{"path":"/reference/detectSerieOut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect outliers for series of observations — detectSerieOut","text":"","code":"# \\donttest{ ## The data from the Phenovator platform have been corrected for spatial ## trends and outliers for single observations have been removed.  ## Fit P-splines on a subset of genotypes subGenoVator <- c(\"G160\", \"G151\") fit.spline <- fitSpline(inDat = spatCorrectedVator,                         trait = \"EffpsII_corr\",                         genotypes = subGenoVator,                         knots = 50)  ## Extract the data.frames with predicted values and P-Spline coefficients. predDat <- fit.spline$predDat coefDat <- fit.spline$coefDat  ## The coefficients are then used to tag suspect time courses. outVator <- detectSerieOut(corrDat = spatCorrectedVator,                            predDat = predDat,                            coefDat = coefDat,                            trait = \"EffpsII_corr\",                            genotypes = subGenoVator,                            thrCor = 0.9,                            thrPca = 30,                            thrSlope = 0.7)  ## The `outVator` can be visualized for selected genotypes. plot(outVator, genotypes = \"G151\")  # }"},{"path":"/reference/detectSingleOut.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect outliers for single observations — detectSingleOut","title":"Detect outliers for single observations — detectSingleOut","text":"Detect outlying observations time series modeling plotId using local regression.","code":""},{"path":"/reference/detectSingleOut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect outliers for single observations — detectSingleOut","text":"","code":"detectSingleOut(   TP,   trait,   plotIds = NULL,   checkEdges = TRUE,   confIntSize = 5,   nnLocfit = 0.5 )"},{"path":"/reference/detectSingleOut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect outliers for single observations — detectSingleOut","text":"TP object class TP. trait character vector indicating trait model TP. plotIds character vector plotIds outliers detected. NULL, plotIds TP used. checkEdges fitting local regression check done first last time point plot outlying observations? confIntSize numeric value defining confidence interval (see Details). nnLocfit numeric value defining constant component smoothing parameter nn (see Details).","code":""},{"path":"/reference/detectSingleOut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect outliers for single observations — detectSingleOut","text":"object class singleOut, data.frame following columns. plotId plotId timePoint time point trait modeled trait yPred prediction local regression sd_yPred standard deviation prediction lwr lower bound confidence interval upr upper bound confidence interval outlier flag detected outlier (value 1 indicates observation outlier)","code":""},{"path":"/reference/detectSingleOut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect outliers for single observations — detectSingleOut","text":"See locfit() help function locfit R library. user can act : nnLocfit constant smoothing parameter. Increase nnLocfit smooth curve confIntSize level calculate confidence interval. Increase confIntSize exclude less outliers","code":""},{"path":[]},{"path":"/reference/detectSingleOut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect outliers for single observations — detectSingleOut","text":"","code":"## Create a TP object containing the data from the Phenovator. PhenovatorDat1 <- PhenovatorDat1[!PhenovatorDat1$pos %in%                                  c(\"c24r41\", \"c7r18\", \"c7r49\"), ] phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\"))  ## First select a subset of plants, for example here 9 plants plantSel <- phenoTP[[1]]$plotId[1:9] # Then run on the subset resuVatorHTP <- detectSingleOut(TP = phenoTP,                                 trait = \"EffpsII\",                                 plotIds = plantSel,                                 confIntSize = 3,                                 nnLocfit = 0.1)"},{"path":"/reference/detectSingleOutMaize.html","id":null,"dir":"Reference","previous_headings":"","what":"detectSingleOutMaize — detectSingleOutMaize","title":"detectSingleOutMaize — detectSingleOutMaize","text":"Function detect plant outliers temporal lattice experiment Maize can extended experiment types. criteria needs three phenotypes (ex maize: estimated biomass, plant height phyllocron) plants identified \"small outlier plant\" biomass phyllocron \\(res_i < \\mu_{res} - qnorm(threshold) * sd_{res}\\) plants identified \"big outlier plant\" biomass plant height \\(res_i > \\mu_{res} + qnorm(threshold) * sd_{res}\\)","code":""},{"path":"/reference/detectSingleOutMaize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detectSingleOutMaize — detectSingleOutMaize","text":"","code":"detectSingleOutMaize(   TP,   timeBeforeTrt,   trait1 = \"Biomass\",   trait2 = \"PlantHeight\",   trait3 = \"phyllocron\",   thr = 0.95 )"},{"path":"/reference/detectSingleOutMaize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"detectSingleOutMaize — detectSingleOutMaize","text":"TP object class TP. timeBeforeTrt character numeric value indicating date just treatment experiment. using character string reference time point, value exact match one existing timePoints. using number matched number (\"timeNumber\") timePoints attribute TP object. trait1 character vector indicating first trait model TP. trait2 character vector indicating second trait model TP. trait3 character vector indicating third trait model TP. thr numeric value indicating threshold.","code":""},{"path":"/reference/detectSingleOutMaize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"detectSingleOutMaize — detectSingleOutMaize","text":"list three data.frames, modDat containing data used fitting models, smallPlants containing plants identified small plants bigPlants containing plants identified big plants.","code":""},{"path":[]},{"path":"/reference/detectSingleOutMaize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"detectSingleOutMaize — detectSingleOutMaize","text":"","code":"# \\donttest{ ## Create a TP object containing the data from the PhenoArch. phenoTParch <- createTimePoints(dat = PhenoarchDat1,                                 experimentName = \"Phenoarch\",                                 genotype = \"Genotype\",                                 timePoint = \"Date\",                                 plotId = \"pos\",                                 rowNum = \"Row\",                                 colNum = \"Col\") singleOutMaize <- detectSingleOutMaize(phenoTParch,                                        timeBeforeTrt = \"2017-04-27\",                                        trait1 = \"Biomass\",                                        trait2 = \"PlantHeight\",                                        trait3 = \"phyllocron\",                                        thr = 0.95) # }"},{"path":"/reference/estimateSplineParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract estimates from fitted splines. — estimateSplineParameters","title":"Extract estimates from fitted splines. — estimateSplineParameters","text":"Function extracting parameter estimates fitted splines specified interval.","code":""},{"path":"/reference/estimateSplineParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract estimates from fitted splines. — estimateSplineParameters","text":"","code":"estimateSplineParameters(   x,   estimate = c(\"predictions\", \"derivatives\", \"derivatives2\"),   what = c(\"min\", \"max\", \"mean\", \"AUC\", \"p\"),   AUCScale = c(\"min\", \"hour\", \"day\"),   timeMin = NULL,   timeMax = NULL,   genotypes = NULL,   plotIds = NULL,   fitLevel = c(\"geno\", \"plot\", \"genoDev\", \"plotDev\") )"},{"path":"/reference/estimateSplineParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract estimates from fitted splines. — estimateSplineParameters","text":"x object class HTPSpline, output fitSpline function, class splineHDm, output fitSplineHDM function estimate P-Spline component estimate extracted, predictions, first derivatives second derivatives (\"derivatives2\") types estimate extracted. Either minimum (\"min\"), maximum (\"max\"), mean, area curve (\"AUC\") percentile. Percentiles given p + percentile. E.g. 10th percentile specify = \"p10\". Multiple types estimate can extracted . AUCScale area curve dependent scale used x-axis. default area computed assuming scale minutes. can changed either hours days. timeMin lower bound time interval estimates extracted. NULL smallest time value splines fitted used. timeMin given numerical value corresponds time scale used fitting splines. See examples. timeMax upper bound time interval estimates extracted. NULL largest time value splines fitted used. timeMin given numerical value corresponds time scale used fitting splines. See examples. genotypes character vector indicating genotypes estimates extracted. NULL, estimates extracted genotypes splines fitted. plotIds character vector indicating plotIds estimates extracted. NULL, estimates extracted plotIds splines fitted. fitLevel character string indicating level data parameter estimates made. used splines fitted using fitSplineHDM.","code":""},{"path":"/reference/estimateSplineParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract estimates from fitted splines. — estimateSplineParameters","text":"object class splineEst, data.frame containing estimated parameters.","code":""},{"path":[]},{"path":"/reference/estimateSplineParameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract estimates from fitted splines. — estimateSplineParameters","text":"","code":"### Estimate parameters for fitted P-splines.  ## Run the function to fit P-splines on a subset of genotypes. subGeno <- c(\"G160\", \"G151\") fit.spline <- fitSpline(inDat = spatCorrectedVator,                         trait = \"EffpsII_corr\",                         genotypes = subGeno,                         knots = 50)  ## Estimate the maximum value of the predictions at the beginning of the time course. ## The spline was fitted at a timePoints scale, i.e. date-time so ## timeMin and timeMax should be given at this scale as well. paramVator <- estimateSplineParameters(x = fit.spline,                                        estimate = \"predictions\",                                        what = \"max\",                                        timeMin = 1527784620,                                        timeMax = 1528500000,                                        genotypes = subGeno) head(paramVator) #>   genotype plotId max_predictions max_timeNumber       max_timePoint #> 1     G151  c13r1       0.6916861         636000 2018-06-08 01:17:00 #> 2     G151 c15r48       0.7030388         651200 2018-06-08 05:30:20 #> 3     G151  c1r16       0.6953883         651200 2018-06-08 05:30:20 #> 4     G151 c21r25       0.7324238         166400 2018-06-02 14:50:20 #> 5     G151   c2r7       0.6942117         651200 2018-06-08 05:30:20 #> 6     G151  c6r46       0.6897347         655200 2018-06-08 06:37:00  ## Create a boxplot of the estimates. plot(paramVator, plotType = \"box\")   ## Estimate the minimum and maximum value of the predictions. paramVator2 <- estimateSplineParameters(x = fit.spline,                                         estimate = \"predictions\",                                         what = c(\"min\", \"max\"),                                         genotypes = subGeno) head(paramVator2) #>   genotype plotId min_predictions min_timeNumber       min_timePoint #> 1     G151  c13r1       0.4256623         795200 2018-06-09 21:30:20 #> 2     G151 c15r48       0.3575513         775200 2018-06-09 15:57:00 #> 3     G151  c1r16       0.3769714         775200 2018-06-09 15:57:00 #> 4     G151 c21r25       0.3013801         787200 2018-06-09 19:17:00 #> 5     G151   c2r7       0.3558154         776800 2018-06-09 16:23:40 #> 6     G151  c6r46       0.3613267         776800 2018-06-09 16:23:40 #>   max_predictions max_timeNumber       max_timePoint #> 1       0.7400419        1212800 2018-06-14 17:30:20 #> 2       0.7367294        1207200 2018-06-14 15:57:00 #> 3       0.7312961        1214400 2018-06-14 17:57:00 #> 4       0.7337103        1214400 2018-06-14 17:57:00 #> 5       0.7353195        1204000 2018-06-14 15:03:40 #> 6       0.7334287        1214400 2018-06-14 17:57:00   ### Estimate parameters for fitted HDM-splines.  ## The data from the Phenovator platform have been corrected for spatial ## trends and outliers for single observations have been removed.  ## We need to specify the genotype-by-treatment interaction. ## Treatment: water regime (WW, WD). spatCorrectedArch[[\"treat\"]] <- substr(spatCorrectedArch[[\"geno.decomp\"]],                                       start = 1, stop = 2) spatCorrectedArch[[\"genoTreat\"]] <-   interaction(spatCorrectedArch[[\"genotype\"]],              spatCorrectedArch[[\"treat\"]], sep = \"_\")  ## Fit P-Splines Hierarchical Curve Data Model for selection of genotypes. fit.psHDM  <- fitSplineHDM(inDat = spatCorrectedArch,                           trait = \"LeafArea_corr\",                           genotypes = c(\"GenoA14_WD\", \"GenoA51_WD\",                                        \"GenoB11_WW\", \"GenoB02_WD\",                                        \"GenoB02_WW\"),                           time = \"timeNumber\",                           pop = \"geno.decomp\",                           genotype = \"genoTreat\",                           plotId = \"plotId\",                           difVar = list(geno = FALSE, plot = FALSE),                           smoothPop = list(nseg = 4, bdeg = 3, pord = 2),                           smoothGeno = list(nseg = 4, bdeg = 3, pord = 2),                           smoothPlot = list(nseg = 4, bdeg = 3, pord = 2),                           weights = \"wt\",                           trace = FALSE)  ## Estimate minimum, maximum, and mean for predictions at the genotype level. ## The spline was fitted at the timeNumber scale, so timeMax ## should be given at that scale as well. paramArch <- estimateSplineParameters(x = fit.psHDM,                                      what = c(\"min\", \"max\", \"mean\"),                                      fitLevel = \"geno\",                                      estimate = \"predictions\",                                      timeMax = 28) head(paramArch) #>         pop   genotype min_predictions min_timeNumber min_timePoint #> 1 WD_Panel1 GenoA14_WD     0.002037944              0    2017-04-13 #> 2 WD_Panel1 GenoA51_WD     0.002994956              0    2017-04-13 #> 3 WD_Panel2 GenoB02_WD     0.002496701              0    2017-04-13 #> 4 WW_Panel2 GenoB02_WW     0.002307846              0    2017-04-13 #> 5 WW_Panel2 GenoB11_WW     0.002291758              0    2017-04-13 #>   max_predictions max_timeNumber max_timePoint mean_predictions #> 1     0.002037944              0    2017-04-13      0.002037944 #> 2     0.002994956              0    2017-04-13      0.002994956 #> 3     0.002496701              0    2017-04-13      0.002496701 #> 4     0.002307846              0    2017-04-13      0.002307846 #> 5     0.002291758              0    2017-04-13      0.002291758  ## Create a boxplot of the estimates. plot(paramArch, plotType = \"box\")     ## Estimate area under the curve for predictions at the plot level. paramArch2 <- estimateSplineParameters(x = fit.psHDM,                                       what = \"AUC\",                                       fitLevel = \"plot\",                                       estimate = \"predictions\") head(paramArch2) #>         pop   genotype plotId AUC_predictions #> 1 WD_Panel1 GenoA51_WD c12r17        389.9525 #> 2 WD_Panel1 GenoA14_WD c12r19        308.4269 #> 3 WD_Panel1 GenoA51_WD c13r13        362.0956 #> 4 WD_Panel1 GenoA14_WD c13r33        362.2137 #> 5 WD_Panel1 GenoA51_WD c16r23        339.7837 #> 6 WD_Panel1 GenoA14_WD c16r35        354.3651"},{"path":"/reference/fitModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit spatial models per time point — fitModels","title":"Fit spatial models per time point — fitModels","text":"Perform REML analysis time point using either SpATS asreml. idea accurately separate genetic effects spatial effects time point. SpATS used default method. See details exact models fitted.","code":""},{"path":"/reference/fitModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit spatial models per time point — fitModels","text":"","code":"fitModels(   TP,   trait,   timePoints = names(TP),   extraFixedFactors = NULL,   geno.decomp = NULL,   what = c(\"random\", \"fixed\"),   useCheck = FALSE,   useRepId = FALSE,   engine = c(\"SpATS\", \"asreml\"),   spatial = FALSE,   quiet = FALSE )"},{"path":"/reference/fitModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit spatial models per time point — fitModels","text":"TP object class TP. trait character string indicating trait used response variable model. timePoints character numeric vector indicating time points modeled. using character string reference time point, value exact match one existing time points. using number matched number (\"timeNumber\") timePoints attribute TP object. extraFixedFactors character vector indicating variables use extra fixed effects model. geno.decomp character vector indicating variables use group genotypic variance model. character vector specifying whether \"genotype\" fitted \"random\" \"fixed\" effect. Note using geno.decomp, fitting model genotype \"fixed\" effect possible. useCheck check genotypes used extra factor model? useRepId repId used fixed effect model? fitting spatial model rowId colId also nested within repId random part model. engine character string indicating engine used fit models. spatial spatial model fitted asreml? quiet printed progress messages suppressed?","code":""},{"path":"/reference/fitModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit spatial models per time point — fitModels","text":"object class fitMod, list fitted models.","code":""},{"path":"/reference/fitModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit spatial models per time point — fitModels","text":"actual model fitted depends function parameters specified. basic model following: trait = genotype + e case useCheck = TRUE, instead genotype, genoCheck used genotype check used extra fixed effect. model becomes: trait = check + genoCheck + e Variables extraFixedFactors fitted extra fixed effects. SpATS used modeling, extra spatial term always included model. term constructed using function PSANOVA SpATS package asPSANOVA(colNum, rowNum, nseg = nSeg, nest.div = 2) wherenSeg = c(number columns, number rows). asreml used modeling spatial = TRUE, four models fitted different covariance structures. best model determined based goodness--fit criterion, AIC, 20% time points least 10 time points. best model run time points. following combinations random spatial terms fitted random = repId:rowId + repId:colId, spatial = NULL random = repId:rowId + repId:colId, spatial = ar1(rowId):colId random = repId:colId + repId:colId, spatial = rowId:ar1(colId) random = repId:rowId + repId:colId, spatial = ar1(rowId):ar1(colId) replicates model, repId left random parts . geno.decomp specified, genotypic variance decomposed following variable(s) chosen. example, treatment used geno.decomp, initial model becomes: trait = treatment + treatment:genotype + e","code":""},{"path":"/reference/fitModels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit spatial models per time point — fitModels","text":"Maria Xose Rodriguez-Alvarez, Martin P. Boer, Fred . van Eeuwijk, Paul H.C. Eilers (2017). Correcting spatial heterogeneity plant breeding experiments P-splines. Spatial Statistics doi:10.1016/j.spasta.2017.10.003  Butler, D. G., et al. (2018). ASReml-R Reference Manual Version 4. VSN International Ltd, http://asreml.org","code":""},{"path":[]},{"path":"/reference/fitModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit spatial models per time point — fitModels","text":"","code":"## Using the first example dataset (PhenovatorDat1): ## Fit a model using SpATS on few time points: # \\donttest{ ## Create an object of class TP. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49 ## Fit a model with SpATS for three time points. modPhenoSp <- fitModels(TP = phenoTP,                         trait = \"EffpsII\",                         timePoints = c(3, 6, 20)) #> 2018-06-01 11:37:00 #> 2018-06-02 09:07:00 #> 2018-06-05 14:37:00 summary(modPhenoSp) #> Models in modPhenoSp where fitted for experiment Phenovator. #>  #> It contains 3 time points. #> The models were fitted using SpATS. #>   ## Fit a model with SpATS for a single time point with extra fixed factors ## and check genotypes: modPhenoSpCheck <- fitModels(TP = phenoTP,                              trait = \"EffpsII\",                              extraFixedFactors = c(\"repId\", \"Image_pos\"),                              useCheck = TRUE,                              timePoints = 3) #> 2018-06-01 11:37:00   ## Fit a model with asreml on few time points with a spatial function: if (requireNamespace(\"asreml\", quietly = TRUE)) {   modPhenoSpAs <- fitModels(TP = phenoTP,                             trait = \"EffpsII\",                             timePoints = c(1, 6, 20),                             engine = \"asreml\",                             spatial = TRUE) }  ## Using the second example dataset (PhenoarchDat1): ## Fit a model with SpATS on one time points with two variables for ## geno.decomp: data(\"PhenoarchDat1\") phenoTParch <- createTimePoints(dat = PhenoarchDat1,                                 experimentName = \"Phenoarch\",                                 genotype = \"Genotype\",                                 timePoint = \"Date\",                                 plotId = \"pos\",                                 rowNum = \"Row\",                                 colNum = \"Col\")  modPhenoSpGD <- fitModels(TP = phenoTParch,                           trait = \"LeafArea\",                           geno.decomp = c(\"Scenario\", \"population\"),                           timePoints = 16) #> 2017-04-28 # }"},{"path":"/reference/fitSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Splines — fitSpline","title":"Fit Splines — fitSpline","text":"Fit P-Splines corrected raw data. number knots chosen user. function outputs predicted P-Spline values first second derivatives dense grid. outputs can used outlier detection time series (see detectSerieOut) estimate relevant parameters curve analysis (see estimateSplineParameters).","code":""},{"path":"/reference/fitSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Splines — fitSpline","text":"","code":"fitSpline(   inDat,   trait,   genotypes = NULL,   plotIds = NULL,   knots = 50,   useTimeNumber = FALSE,   timeNumber = NULL,   minNoTP = NULL )"},{"path":"/reference/fitSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Splines — fitSpline","text":"inDat data.frame corrected spatial data. trait character string indicating trait spline fitted. genotypes character vector indicating genotypes splines fitted. NULL, splines fitted genotypes. plotIds character vector indicating plotIds splines fitted. NULL, splines fitted plotIds. knots number knots use fitting spline. useTimeNumber timeNumber used instead timePoint? timeNumber useTimeNumber = TRUE, character vector indicating column containing numerical time use. minNoTP minimum number time points data available plant. Defaults 80% time points present TP object. splines fitted plants less minimum number timepoints.","code":""},{"path":"/reference/fitSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Splines — fitSpline","text":"object class HTPSpline, list two data.frames, predDat predicted values coefDat P-Spline coefficients dense grid.","code":""},{"path":[]},{"path":"/reference/fitSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Splines — fitSpline","text":"","code":"## The data from the Phenovator platform have been corrected for spatial ## trends and outliers for single observations have been removed.  ## Fit P-Splines on a subset of genotypes subGeno <- c(\"G070\", \"G160\") fit.spline <- fitSpline(inDat = spatCorrectedVator,                         trait = \"EffpsII_corr\",                         genotypes = subGeno,                         knots = 50)  ## Extract the data.frames with predicted values and P-Spline coefficients. predDat <- fit.spline$predDat head(predDat) #>   timeNumber           timePoint pred.value         deriv       deriv2 plotId #> 1          0 2018-05-31 16:37:00  0.6687993 -8.426473e-07 1.839622e-12 c10r29 #> 2        800 2018-05-31 16:50:20  0.6681258 -8.410810e-07 2.076020e-12 c10r29 #> 3       1600 2018-05-31 17:03:40  0.6674536 -8.393257e-07 2.312418e-12 c10r29 #> 4       2400 2018-05-31 17:17:00  0.6667829 -8.373812e-07 2.548816e-12 c10r29 #> 5       3200 2018-05-31 17:30:20  0.6661139 -8.352476e-07 2.785214e-12 c10r29 #> 6       4000 2018-05-31 17:43:40  0.6654466 -8.329248e-07 3.021612e-12 c10r29 #>   genotype #> 1     G160 #> 2     G160 #> 3     G160 #> 4     G160 #> 5     G160 #> 6     G160  coefDat <- fit.spline$coefDat head(coefDat) #>   obj.coefficients plotId        type genotype #> 1        0.6965965 c10r29 timeNumber1     G160 #> 2        0.6685027 c10r29 timeNumber2     G160 #> 3        0.6421887 c10r29 timeNumber3     G160 #> 4        0.6265465 c10r29 timeNumber4     G160 #> 5        0.6263577 c10r29 timeNumber5     G160 #> 6        0.6420706 c10r29 timeNumber6     G160  ## Visualize the P-Spline predictions for one genotype. plot(fit.spline, genotypes = \"G160\")   ## Visualize the P-Spline predictions and first derivatives for one plant. plot(fit.spline, plotIds = \"c10r29\", plotType = \"predictions\")  plot(fit.spline, plotIds = \"c10r29\", plotType = \"derivatives\")"},{"path":"/reference/fitSplineHDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit P-Spline Hierarchical Curve Data Models — fitSplineHDM","title":"Fit P-Spline Hierarchical Curve Data Models — fitSplineHDM","text":"Fit P-spline Hierarchical Curve Data Model used second stage two-stage approach proposed Pérez-Valencia et al. (2022). model assumes three-level hierarchical structure data, plants nested genotypes, genotypes nested populations. input function spatially corrected data, obtained first stage approach (see fitModels getCorrected). number segments chosen user, well B-spline degree, penalty order three-levels hierarchy. user can also decide different variances random effects genotype (separately population) plant (separately genotype) levels desired. function outputs estimated curves (time series trajectories deviations) first second derivatives three-levels hierarchy. outputs can used estimate relevant parameters curves analysis (see estimateSplineParameters).","code":""},{"path":"/reference/fitSplineHDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit P-Spline Hierarchical Curve Data Models — fitSplineHDM","text":"","code":"fitSplineHDM(   inDat,   genotypes = NULL,   plotIds = NULL,   trait,   useTimeNumber = FALSE,   timeNumber = NULL,   pop = \"pop\",   genotype = \"genotype\",   plotId = \"plotId\",   weights = NULL,   difVar = list(geno = FALSE, plot = FALSE),   smoothPop = list(nseg = 10, bdeg = 3, pord = 2),   smoothGeno = list(nseg = 10, bdeg = 3, pord = 2),   smoothPlot = list(nseg = 10, bdeg = 3, pord = 2),   offset = NULL,   family = gaussian(),   maxit = 200,   trace = TRUE,   thr = 0.001,   minNoTP = NULL )"},{"path":"/reference/fitSplineHDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit P-Spline Hierarchical Curve Data Models — fitSplineHDM","text":"inDat data.frame corrected spatial data. genotypes character vector indicating genotypes hierarchical models fitted. NULL, splines fitted genotypes. plotIds character vector indicating plotIds hierarchical models fitted. NULL, splines fitted plotIds. trait character string indicating trait spline fitted. useTimeNumber timeNumber used instead timePoint?. useTimeNumber = FALSE, inDat contain column called timePoint class POSIXct. timeNumber useTimeNumber = TRUE, character vector indicating column containing numerical time use. pop character string indicating populations genotype/variety belongs. variable must factor data frame. genotype character string indicating populations genotype/variety belongs. variable must factor data frame. plotId character string indicating genotypes/varieties plant/plot/individual belongs. variable must factor data frame. weights character string indicating column data containing weights used fitting process (error propagation first stage second stage). default, weights = NULL, weights considered one. difVar different variances random effects genotype (separately population) plant level (separately genotype) considered?. smoothPop list specifying P-Spline model population level (nseg: number segments; bdeg: degree B-spline basis; pord: penalty order). smoothGeno list specifying P-Spline model genotype level. smoothPlot list specifying P-Spline model plant level. offset character string indicating column data priori known component included linear predictor fitting. default, offset = NULL, offset considered zero. family object class family specifying distribution link function. default gaussian(). maxit optional value controls maximum number iterations algorithm. default 200. trace optional value controls function trace. default TRUE. thr optional value controls convergence threshold algorithm. default 1.e-03. minNoTP minimum number time points data available plant. Defaults 60% time points present TP object. splines fitted plants less minimum number timepoints.","code":""},{"path":"/reference/fitSplineHDM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit P-Spline Hierarchical Curve Data Models — fitSplineHDM","text":"object class psHDM, list following outputs: time, numeric vector timepoints. popLevs, data.frame names populations genoLevs, factor names genotypes. plotLevs, factor names plants nPlotPop, numeric vector number plants per population. nGenoPop, numeric vector number genotypes per population. nPlotGeno, numeric vector number plants per genotype. MM, list design matrices plant, genotype population levels. ed, numeric vector estimated effective dimension (effective degrees freedom) random component model (intercept, slope non-linear trend) level hierarchy (population, genotype plant) tot_ed, numeric value sum effective dimensions components model. vc, numeric vector (REML) variance component estimates random component model (intercept, slope non-linear trend) level hierarchy (population, genotype plant) phi, numeric value error variance estimate. coeff, numeric vector estimated fixed random effect coefficients. popLevel, data.frame estimated population trajectories first second order derivatives. genoLevel, data.frame estimated genotype-specific deviations trajectories, respective first second order derivatives. plotLevel, data.frame estimated plant-specific deviations trajectories, respective first second order derivatives. deviance, (REML) deviance convergence. convergence, logical value indicating whether algorithm managed converge given number iterations. dim, numeric vector (model) dimension model component (fixed /random) level hierarchy (population, genotype, plant). values correspond number parameters estimated. family, object class family specifying distribution link function. cholHn, inverse variance-covariance matrix coefficients. smooth, list information number segments (nseg), degree B-spline basis (bdeg) penalty order (pord) used three levels hierarchy.","code":""},{"path":"/reference/fitSplineHDM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit P-Spline Hierarchical Curve Data Models — fitSplineHDM","text":"Pérez-Valencia, D.M., Rodríguez-Álvarez, M.X., Boer, M.P. et al. two-stage approach spatio-temporal analysis high-throughput phenotyping data. Sci Rep 12, 3177 (2022). doi:10.1038/s41598-022-06935-9","code":""},{"path":[]},{"path":"/reference/fitSplineHDM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit P-Spline Hierarchical Curve Data Models — fitSplineHDM","text":"","code":"## The data from the Phenovator platform have been corrected for spatial ## trends and outliers for single observations have been removed. head(spatCorrectedArch) #>   timeNumber  timePoint LeafArea_corr    LeafArea       wt genotype geno.decomp #> 1          1 2017-04-13   0.002564006 0.002871676 2262.277  GenoA01   WD_Panel1 #> 2          1 2017-04-13   0.002395392 0.002515396 2262.277  GenoA01   WD_Panel1 #> 3          1 2017-04-13   0.003210178 0.003377735 2262.277  GenoA01   WD_Panel1 #> 4          1 2017-04-13   0.003028267 0.003256119 2262.277  GenoA01   WD_Panel1 #> 5          1 2017-04-13   0.002689516 0.002489031 2262.277  GenoA01   WD_Panel1 #> 6          1 2017-04-13   0.002810055 0.002677329 2262.614  GenoA02   WD_Panel1 #>   rowId colId plotId #> 1     2    16  c16r2 #> 2     3    28  c28r3 #> 3    26    24 c24r26 #> 4    24    20 c20r24 #> 5    56    21 c21r56 #> 6    38    16 c16r38 ggplot2::ggplot(data = spatCorrectedArch,                 ggplot2::aes(x= timeNumber, y = LeafArea_corr, group = plotId)) +   ggplot2::geom_line(na.rm = TRUE) +   ggplot2::facet_grid(~geno.decomp)   ## We need to specify the genotype-by-treatment interaction. ## Treatment: water regime (WW, WD). spatCorrectedArch[[\"treat\"]] <- substr(spatCorrectedArch[[\"geno.decomp\"]],                                       start = 1, stop = 2) spatCorrectedArch[[\"genoTreat\"]] <-   interaction(spatCorrectedArch[[\"genotype\"]],              spatCorrectedArch[[\"treat\"]], sep = \"_\")  ## Fit P-Splines Hierarchical Curve Data Model for selection of genotypes. fit.psHDM  <- fitSplineHDM(inDat = spatCorrectedArch,                           trait = \"LeafArea_corr\",                           useTimeNumber = TRUE,                           timeNumber = \"timeNumber\",                           genotypes = c(\"GenoA14_WD\", \"GenoA51_WD\",                                        \"GenoB11_WW\", \"GenoB02_WD\",                                        \"GenoB02_WW\"),                           pop = \"geno.decomp\",                           genotype = \"genoTreat\",                           plotId = \"plotId\",                           weights = \"wt\",                           difVar = list(geno = FALSE, plot = FALSE),                           smoothPop = list(nseg = 4, bdeg = 3, pord = 2),                           smoothGeno = list(nseg = 4, bdeg = 3, pord = 2),                           smoothPlot = list(nseg = 4, bdeg = 3, pord = 2),                           trace = FALSE)  ## Visualize the data.frames with predicted values at the three levels of ## the hierarchy.  # Population level head(fit.psHDM$popLevel) #>   timeNumber  timePoint       pop        fPop  fPopDeriv1    fPopDeriv2 #> 1          1 2017-04-13 WD_Panel1 0.002463487 0.001279128 -5.201063e-05 #> 2          2 2017-04-14 WD_Panel1 0.003738644 0.001293221  8.019776e-05 #> 3          3 2017-04-15 WD_Panel1 0.005093999 0.001439523  2.124061e-04 #> 4          4 2017-04-16 WD_Panel1 0.006661760 0.001718034  3.446145e-04 #> 5          5 2017-04-17 WD_Panel1 0.008574135 0.002128752  4.768229e-04 #> 6          6 2017-04-18 WD_Panel1 0.010963334 0.002671679  6.090313e-04  # Genotype level head(fit.psHDM$genoLevel) #>   timeNumber  timePoint       pop   genotype       fGeno fGenoDeriv1 #> 1          1 2017-04-13 WD_Panel1 GenoA14_WD 0.002075685 0.001195395 #> 2          2 2017-04-14 WD_Panel1 GenoA14_WD 0.003239685 0.001155231 #> 3          3 2017-04-15 WD_Panel1 GenoA14_WD 0.004431400 0.001250825 #> 4          4 2017-04-16 WD_Panel1 GenoA14_WD 0.005786587 0.001482175 #> 5          5 2017-04-17 WD_Panel1 GenoA14_WD 0.007441002 0.001849282 #> 6          6 2017-04-18 WD_Panel1 GenoA14_WD 0.009530403 0.002352147 #>     fGenoDeriv2      fGenoDev fGenoDevDeriv1 fGenoDevDeriv2 #> 1 -1.080422e-04 -0.0003878021  -8.373266e-05  -5.603156e-05 #> 2  2.771481e-05 -0.0004989591  -1.379899e-04  -5.248295e-05 #> 3  1.634718e-04 -0.0006625990  -1.886986e-04  -4.893433e-05 #> 4  2.992288e-04 -0.0008751733  -2.358586e-04  -4.538572e-05 #> 5  4.349858e-04 -0.0011331333  -2.794700e-04  -4.183711e-05 #> 6  5.707428e-04 -0.0014329305  -3.195328e-04  -3.828850e-05  # Plot level head(fit.psHDM$plotLevel) #>   timeNumber  timePoint       pop   genotype plotId       fPlot fPlotDeriv1 #> 1          1 2017-04-13 WD_Panel1 GenoA14_WD c12r19 0.001584312 0.001503451 #> 2          2 2017-04-14 WD_Panel1 GenoA14_WD c12r19 0.003010985 0.001373428 #> 3          3 2017-04-15 WD_Panel1 GenoA14_WD c12r19 0.004378235 0.001384605 #> 4          4 2017-04-16 WD_Panel1 GenoA14_WD c12r19 0.005827262 0.001536982 #> 5          5 2017-04-17 WD_Panel1 GenoA14_WD c12r19 0.007499265 0.001830558 #> 6          6 2017-04-18 WD_Panel1 GenoA14_WD c12r19 0.009535444 0.002265334 #>     fPlotDeriv2      fPlotDev fPlotDevDeriv1 fPlotDevDeriv2     obsPlot #> 1 -0.0002006230 -4.913732e-04   3.080565e-04  -9.258081e-05          NA #> 2 -0.0000594232 -2.287000e-04   2.181971e-04  -8.713801e-05 0.003152152 #> 3  0.0000817766 -5.316485e-05   1.337804e-04  -8.169521e-05 0.004326641 #> 4  0.0002229764  4.067512e-05   5.480663e-05  -7.625242e-05          NA #> 5  0.0003641762  5.826267e-05  -1.872439e-05  -7.080962e-05 0.007478926 #> 6  0.0005053760  5.040608e-06  -8.681261e-05  -6.536682e-05 0.009495492"},{"path":"/reference/getCorrected.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract corrected phenotypic values — getCorrected","title":"Extract corrected phenotypic values — getCorrected","text":"Extract corrected phenotypic values object class fitMod. fitting spatial model time point, raw phenotypic data corrected subtracting (estimated) sources variation (environmental, design  effect) interest (nuisances). allows keeping data resolution plot/plant level.","code":""},{"path":"/reference/getCorrected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract corrected phenotypic values — getCorrected","text":"","code":"getCorrected(fitMod, timePoints = names(fitMod), outFile = NULL)"},{"path":"/reference/getCorrected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract corrected phenotypic values — getCorrected","text":"fitMod object class fitMod. timePoints character numeric vector indicating time point(s) corrected values extracted. using character string reference time point, value exact match one existing time points. using number matched number (\"timeNumber\") timePoints attribute TP object. outFile character string indicating .csv file results written. NULL file written.","code":""},{"path":"/reference/getCorrected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract corrected phenotypic values — getCorrected","text":"data.frame spatially corrected values per time point.","code":""},{"path":[]},{"path":"/reference/getCorrected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract corrected phenotypic values — getCorrected","text":"","code":"# \\donttest{ ## Using the first example dataset (PhenovatorDat1). phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49  ## Fit a SpATS model on few time points. modPhenoSp <- fitModels(TP = phenoTP,                         trait = \"EffpsII\",                         timePoints = c(1, 6, 20)) #> 2018-05-31 16:37:00 #> 2018-06-02 09:07:00 #> 2018-06-05 14:37:00  ## Extract the corrected values for one time point: spatCorrSp <- getCorrected(modPhenoSp,                            timePoints = 6) head(spatCorrSp) #>   timeNumber           timePoint EffpsII_corr EffpsII       wt genotype rowId #> 1          6 2018-06-02 09:07:00    0.6810552   0.678 1636.287     G001    32 #> 2          6 2018-06-02 09:07:00    0.6625282   0.659 1636.287     G001    58 #> 3          6 2018-06-02 09:07:00    0.6286591   0.630 1636.287     G001    21 #> 4          6 2018-06-02 09:07:00    0.7115547   0.722 1636.287     G001    22 #> 5          6 2018-06-02 09:07:00    0.6764931   0.682 1636.287     G001    33 #> 6          6 2018-06-02 09:07:00    0.6455498   0.641 1636.287     G001     8 #>   colId plotId #> 1    14 c14r32 #> 2    17 c17r58 #> 3    20 c20r21 #> 4     6  c6r22 #> 5     5  c5r33 #> 6    21  c21r8 # }"},{"path":"/reference/getEffDims.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract effective dimensions — getEffDims","title":"Extract effective dimensions — getEffDims","text":"Extract effective dimensions object class fitMod. table gives overview effective dimensions explanation meaning.","code":""},{"path":"/reference/getEffDims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract effective dimensions — getEffDims","text":"","code":"getEffDims(   fitMod,   timePoints = names(fitMod),   EDType = c(\"dimension\", \"ratio\"),   outFile = NULL )"},{"path":"/reference/getEffDims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract effective dimensions — getEffDims","text":"fitMod object class fitMod. timePoints character numeric vector indicating time point(s) effective dimension extracted. using character string reference time point, value exact match one existing time points. using number matched number (\"timeNumber\") timePoints attribute TP object. EDType character string specifying effective dimension (\"dimension\") ratio effective dimensions (\"ratio\") returned. outFile character string indicating .csv file results written. NULL file written.","code":""},{"path":"/reference/getEffDims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract effective dimensions — getEffDims","text":"data.frame effective dimensions per time point.","code":""},{"path":[]},{"path":"/reference/getEffDims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract effective dimensions — getEffDims","text":"","code":"# \\donttest{ ## Using the first example dataset (PhenovatorDat1): data(\"PhenovatorDat1\") phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49  ## Fit a SpATS model on few time points: modPhenoSp <- fitModels(TP = phenoTP,                         trait = \"EffpsII\",                         timePoints = c(1, 6, 20)) #> 2018-05-31 16:37:00 #> 2018-06-02 09:07:00 #> 2018-06-05 14:37:00  ## Extract the effective dimensions for all available time points in the ## model object: effDimSp <- getEffDims(modPhenoSp) # }"},{"path":"/reference/getGenoPred.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract predicted genotypic values — getGenoPred","title":"Extract predicted genotypic values — getGenoPred","text":"Extract predictions genotypic value object class fitMod.","code":""},{"path":"/reference/getGenoPred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract predicted genotypic values — getGenoPred","text":"","code":"getGenoPred(   fitMod,   timePoints = names(fitMod),   predictChecks = FALSE,   outFile = NULL )"},{"path":"/reference/getGenoPred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract predicted genotypic values — getGenoPred","text":"fitMod object class fitMod. timePoints character numeric vector indicating time point(s) predictions extracted. using character string reference time point, value exact match one existing time points. using number matched number (\"timeNumber\") timePoints attribute TP object. predictChecks predictions check genotypes included ouptut. TRUE list two data.frames returned function, one predictions regular genotypes one predictions checks. outFile character string indicating .csv file results written. NULL file written.","code":""},{"path":"/reference/getGenoPred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract predicted genotypic values — getGenoPred","text":"list two data.frames predicted genotypic values per time point. genoPred predicted values genotypes checkPred predicted values checks. predictChecks = FALSE latter NULL.","code":""},{"path":[]},{"path":"/reference/getGenoPred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract predicted genotypic values — getGenoPred","text":"","code":"## Using the first example dataset (PhenovatorDat1). # \\donttest{ phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49  ## Fit a SpATS model on few time points. modPhenoSp <- fitModels(TP = phenoTP,                         trait = \"EffpsII\",                         timePoints = c(1, 6, 20)) #> 2018-05-31 16:37:00 #> 2018-06-02 09:07:00 #> 2018-06-05 14:37:00  ## Extract the genotypic predictions for one time point: genoPredSp <- getGenoPred(modPhenoSp,                           timePoints = 6) head(genoPredSp) #> $genoPred #>     timeNumber           timePoint genotype predicted.values standard.errors #> 1            6 2018-06-02 09:07:00     G001        0.6664379     0.007700058 #> 2            6 2018-06-02 09:07:00     G002        0.6649805     0.007700359 #> 3            6 2018-06-02 09:07:00     G003        0.6569831     0.007704902 #> 4            6 2018-06-02 09:07:00     G004        0.6122083     0.007729850 #> 5            6 2018-06-02 09:07:00     G005        0.6576721     0.007697154 #> 6            6 2018-06-02 09:07:00     G006        0.6442406     0.007711890 #> 7            6 2018-06-02 09:07:00     G007        0.6620636     0.007709637 #> 8            6 2018-06-02 09:07:00     G008        0.6592120     0.007709473 #> 9            6 2018-06-02 09:07:00     G009        0.6386014     0.007697191 #> 10           6 2018-06-02 09:07:00     G010        0.6516471     0.007705202 #> 11           6 2018-06-02 09:07:00     G011        0.6750342     0.007708246 #> 12           6 2018-06-02 09:07:00     G012        0.6498224     0.007707951 #> 13           6 2018-06-02 09:07:00     G013        0.6605911     0.007700541 #> 14           6 2018-06-02 09:07:00     G014        0.6554624     0.007703979 #> 15           6 2018-06-02 09:07:00     G015        0.6597110     0.007705703 #> 16           6 2018-06-02 09:07:00     G016        0.6567955     0.007703997 #> 17           6 2018-06-02 09:07:00     G017        0.6591929     0.007695574 #> 18           6 2018-06-02 09:07:00     G018        0.6762427     0.007702262 #> 19           6 2018-06-02 09:07:00     G019        0.6659143     0.007707118 #> 20           6 2018-06-02 09:07:00     G020        0.6645302     0.007709326 #> 21           6 2018-06-02 09:07:00     G021        0.6846686     0.007701105 #> 22           6 2018-06-02 09:07:00     G022        0.6509674     0.008658303 #> 23           6 2018-06-02 09:07:00     G023        0.6830110     0.007702653 #> 24           6 2018-06-02 09:07:00     G024        0.6600209     0.007699111 #> 25           6 2018-06-02 09:07:00     G025        0.6445336     0.007702148 #> 26           6 2018-06-02 09:07:00     G026        0.6768089     0.007709682 #> 27           6 2018-06-02 09:07:00     G027        0.6544579     0.007699560 #> 28           6 2018-06-02 09:07:00     G028        0.6445496     0.007705877 #> 29           6 2018-06-02 09:07:00     G029        0.6693540     0.007699365 #> 30           6 2018-06-02 09:07:00     G030        0.6630166     0.007697679 #> 31           6 2018-06-02 09:07:00     G031        0.6601530     0.007701743 #> 32           6 2018-06-02 09:07:00     G032        0.6633195     0.007727830 #> 33           6 2018-06-02 09:07:00     G033        0.6645295     0.007703311 #> 34           6 2018-06-02 09:07:00     G034        0.6708713     0.007731471 #> 35           6 2018-06-02 09:07:00     G035        0.6536753     0.007729132 #> 36           6 2018-06-02 09:07:00     G036        0.6802631     0.007704726 #> 37           6 2018-06-02 09:07:00     G037        0.6612019     0.007698814 #> 38           6 2018-06-02 09:07:00     G038        0.6602141     0.007700083 #> 39           6 2018-06-02 09:07:00     G039        0.6735273     0.007700494 #> 40           6 2018-06-02 09:07:00     G040        0.6530825     0.007694335 #> 41           6 2018-06-02 09:07:00     G041        0.6621874     0.007707950 #> 42           6 2018-06-02 09:07:00     G042        0.6722508     0.008124089 #> 43           6 2018-06-02 09:07:00     G043        0.6612456     0.007701214 #> 44           6 2018-06-02 09:07:00     G044        0.6609375     0.007703963 #> 45           6 2018-06-02 09:07:00     G045        0.6787019     0.007702768 #> 46           6 2018-06-02 09:07:00     G046        0.6677625     0.007704307 #> 47           6 2018-06-02 09:07:00     G047        0.6654780     0.007698372 #> 48           6 2018-06-02 09:07:00     G048        0.6549039     0.007704991 #> 49           6 2018-06-02 09:07:00     G049        0.6449453     0.007711530 #> 50           6 2018-06-02 09:07:00     G050        0.6663340     0.007705456 #> 51           6 2018-06-02 09:07:00     G051        0.6611572     0.007727261 #> 52           6 2018-06-02 09:07:00     G052        0.6550151     0.007706797 #> 53           6 2018-06-02 09:07:00     G053        0.6585780     0.007705182 #> 54           6 2018-06-02 09:07:00     G054        0.6680242     0.007751794 #> 55           6 2018-06-02 09:07:00     G055        0.6703971     0.007729620 #> 56           6 2018-06-02 09:07:00     G056        0.6118391     0.007701664 #> 57           6 2018-06-02 09:07:00     G057        0.6645530     0.007723636 #> 58           6 2018-06-02 09:07:00     G058        0.6595585     0.007700130 #> 59           6 2018-06-02 09:07:00     G059        0.6652163     0.007705836 #> 60           6 2018-06-02 09:07:00     G060        0.6667614     0.007753973 #> 61           6 2018-06-02 09:07:00     G061        0.6642653     0.007699283 #> 62           6 2018-06-02 09:07:00     G062        0.6645500     0.007706543 #> 63           6 2018-06-02 09:07:00     G063        0.6699651     0.008116854 #> 64           6 2018-06-02 09:07:00     G064        0.6619514     0.007703589 #> 65           6 2018-06-02 09:07:00     G065        0.6651044     0.007733521 #> 66           6 2018-06-02 09:07:00     G066        0.6724889     0.007699851 #> 67           6 2018-06-02 09:07:00     G067        0.6611455     0.007701246 #> 68           6 2018-06-02 09:07:00     G068        0.6507050     0.008127772 #> 69           6 2018-06-02 09:07:00     G069        0.6613007     0.007739806 #> 70           6 2018-06-02 09:07:00     G070        0.6574314     0.008616607 #> 71           6 2018-06-02 09:07:00     G071        0.6694904     0.007703818 #> 72           6 2018-06-02 09:07:00     G072        0.6690957     0.007698006 #> 73           6 2018-06-02 09:07:00     G073        0.6632111     0.007702209 #> 74           6 2018-06-02 09:07:00     G074        0.6481942     0.007707940 #> 75           6 2018-06-02 09:07:00     G075        0.6686951     0.007707523 #> 76           6 2018-06-02 09:07:00     G076        0.6711070     0.007701188 #> 77           6 2018-06-02 09:07:00     G077        0.6612662     0.007697369 #> 78           6 2018-06-02 09:07:00     G078        0.6532985     0.007723672 #> 79           6 2018-06-02 09:07:00     G079        0.6640932     0.007694946 #> 80           6 2018-06-02 09:07:00     G080        0.6702728     0.007726926 #> 81           6 2018-06-02 09:07:00     G081        0.6760972     0.007696653 #> 82           6 2018-06-02 09:07:00     G082        0.6710345     0.007730372 #> 83           6 2018-06-02 09:07:00     G083        0.6488169     0.007710044 #> 84           6 2018-06-02 09:07:00     G084        0.6713796     0.007725933 #> 85           6 2018-06-02 09:07:00     G085        0.6744627     0.007699481 #> 86           6 2018-06-02 09:07:00     G086        0.6757281     0.007731798 #> 87           6 2018-06-02 09:07:00     G087        0.6509790     0.007732842 #> 88           6 2018-06-02 09:07:00     G088        0.6576374     0.007699586 #> 89           6 2018-06-02 09:07:00     G089        0.6605186     0.007699723 #> 90           6 2018-06-02 09:07:00     G090        0.6553467     0.007699184 #> 91           6 2018-06-02 09:07:00     G091        0.6703697     0.007704221 #> 92           6 2018-06-02 09:07:00     G092        0.6539418     0.007700623 #> 93           6 2018-06-02 09:07:00     G093        0.6604147     0.007715465 #> 94           6 2018-06-02 09:07:00     G094        0.6592644     0.008120315 #> 95           6 2018-06-02 09:07:00     G095        0.6711211     0.007699168 #> 96           6 2018-06-02 09:07:00     G096        0.6567808     0.007754300 #> 97           6 2018-06-02 09:07:00     G097        0.6612442     0.008126946 #> 98           6 2018-06-02 09:07:00     G098        0.6550896     0.007707885 #> 99           6 2018-06-02 09:07:00     G099        0.6607817     0.008193340 #> 100          6 2018-06-02 09:07:00     G100        0.6770290     0.010959465 #> 101          6 2018-06-02 09:07:00     G101        0.6775766     0.007700139 #> 102          6 2018-06-02 09:07:00     G102        0.6706355     0.007703304 #> 103          6 2018-06-02 09:07:00     G103        0.6615825     0.007697344 #> 104          6 2018-06-02 09:07:00     G104        0.6687181     0.007705662 #> 105          6 2018-06-02 09:07:00     G105        0.6643059     0.007729564 #> 106          6 2018-06-02 09:07:00     G106        0.6601783     0.007704042 #> 107          6 2018-06-02 09:07:00     G107        0.6385798     0.007701669 #> 108          6 2018-06-02 09:07:00     G108        0.6645371     0.007753134 #> 109          6 2018-06-02 09:07:00     G109        0.6566105     0.007701133 #> 110          6 2018-06-02 09:07:00     G110        0.6747622     0.007701680 #> 111          6 2018-06-02 09:07:00     G111        0.6409722     0.007703590 #> 112          6 2018-06-02 09:07:00     G112        0.6695963     0.007699623 #> 113          6 2018-06-02 09:07:00     G113        0.6679433     0.007701223 #> 114          6 2018-06-02 09:07:00     G114        0.6707194     0.007702253 #> 115          6 2018-06-02 09:07:00     G115        0.6768654     0.007698791 #> 116          6 2018-06-02 09:07:00     G116        0.6605405     0.007699775 #> 117          6 2018-06-02 09:07:00     G117        0.6751478     0.007700256 #> 118          6 2018-06-02 09:07:00     G118        0.6622331     0.007699093 #> 119          6 2018-06-02 09:07:00     G119        0.6529363     0.007709090 #> 120          6 2018-06-02 09:07:00     G120        0.6599894     0.007702553 #> 121          6 2018-06-02 09:07:00     G121        0.6705033     0.007702127 #> 122          6 2018-06-02 09:07:00     G122        0.6682551     0.007706948 #> 123          6 2018-06-02 09:07:00     G123        0.6475131     0.007707386 #> 124          6 2018-06-02 09:07:00     G124        0.6411380     0.007699575 #> 125          6 2018-06-02 09:07:00     G125        0.6691985     0.007703873 #> 126          6 2018-06-02 09:07:00     G126        0.6667264     0.007704937 #> 127          6 2018-06-02 09:07:00     G127        0.6678950     0.007697067 #> 128          6 2018-06-02 09:07:00     G128        0.6548751     0.007700656 #> 129          6 2018-06-02 09:07:00     G129        0.6650380     0.007727470 #> 130          6 2018-06-02 09:07:00     G130        0.6624278     0.007709811 #> 131          6 2018-06-02 09:07:00     G131        0.6713800     0.007707018 #> 132          6 2018-06-02 09:07:00     G132        0.6530011     0.007698864 #> 133          6 2018-06-02 09:07:00     G133        0.6638719     0.007700631 #> 134          6 2018-06-02 09:07:00     G134        0.6688086     0.007699578 #> 135          6 2018-06-02 09:07:00     G135        0.6665965     0.008118718 #> 136          6 2018-06-02 09:07:00     G136        0.6612019     0.007726583 #> 137          6 2018-06-02 09:07:00     G137        0.6625749     0.007698220 #> 138          6 2018-06-02 09:07:00     G138        0.6612678     0.007700833 #> 139          6 2018-06-02 09:07:00     G139        0.6768107     0.007703699 #> 140          6 2018-06-02 09:07:00     G140        0.6662416     0.007696663 #> 141          6 2018-06-02 09:07:00     G141        0.6781536     0.007699923 #> 142          6 2018-06-02 09:07:00     G142        0.6586183     0.008619330 #> 143          6 2018-06-02 09:07:00     G143        0.6677179     0.007715456 #> 144          6 2018-06-02 09:07:00     G144        0.6655668     0.007697878 #> 145          6 2018-06-02 09:07:00     G145        0.6626089     0.007709919 #> 146          6 2018-06-02 09:07:00     G146        0.6630299     0.007705597 #> 147          6 2018-06-02 09:07:00     G147        0.6621096     0.007700863 #> 148          6 2018-06-02 09:07:00     G148        0.6637336     0.007711971 #> 149          6 2018-06-02 09:07:00     G149        0.6623033     0.007725988 #> 150          6 2018-06-02 09:07:00     G150        0.6611395     0.007701117 #> 151          6 2018-06-02 09:07:00     G151        0.6703583     0.008137396 #> 152          6 2018-06-02 09:07:00     G152        0.6602543     0.007701790 #> 153          6 2018-06-02 09:07:00     G153        0.6561635     0.007710115 #> 154          6 2018-06-02 09:07:00     G154        0.6629187     0.007702880 #> 155          6 2018-06-02 09:07:00     G155        0.6705896     0.007703185 #> 156          6 2018-06-02 09:07:00     G156        0.6844003     0.007705869 #> 157          6 2018-06-02 09:07:00     G157        0.6610507     0.007715084 #> 158          6 2018-06-02 09:07:00     G158        0.6683279     0.007729605 #> 159          6 2018-06-02 09:07:00     G159        0.6661457     0.007698585 #> 160          6 2018-06-02 09:07:00     G160        0.6728815     0.008151421 #> 161          6 2018-06-02 09:07:00     G161        0.6682824     0.007727406 #> 162          6 2018-06-02 09:07:00     G162        0.6661318     0.007702443 #> 163          6 2018-06-02 09:07:00     G163        0.6678264     0.007726285 #> 164          6 2018-06-02 09:07:00     G164        0.6735394     0.007702346 #> 165          6 2018-06-02 09:07:00     G165        0.6563783     0.007703739 #> 166          6 2018-06-02 09:07:00     G166        0.6707537     0.007701172 #> 167          6 2018-06-02 09:07:00     G167        0.6440117     0.007705528 #> 168          6 2018-06-02 09:07:00     G168        0.6529146     0.007734770 #> 169          6 2018-06-02 09:07:00     G169        0.6684723     0.007704579 #> 170          6 2018-06-02 09:07:00     G170        0.6651630     0.007712559 #> 171          6 2018-06-02 09:07:00     G171        0.6648108     0.007699813 #> 172          6 2018-06-02 09:07:00     G172        0.6599931     0.007707282 #> 173          6 2018-06-02 09:07:00     G173        0.6546251     0.007731448 #> 174          6 2018-06-02 09:07:00     G174        0.6774589     0.007706590 #> 175          6 2018-06-02 09:07:00     G175        0.6486491     0.007703446 #> 176          6 2018-06-02 09:07:00     G176        0.6592223     0.007698616 #> 177          6 2018-06-02 09:07:00     G177        0.6538269     0.007712652 #> 178          6 2018-06-02 09:07:00     G178        0.6531421     0.008119709 #> 179          6 2018-06-02 09:07:00     G179        0.6588950     0.007711187 #> 180          6 2018-06-02 09:07:00     G180        0.6670155     0.007704359 #> 181          6 2018-06-02 09:07:00     G181        0.6094924     0.008125642 #> 182          6 2018-06-02 09:07:00     G182        0.6753670     0.007701206 #> 183          6 2018-06-02 09:07:00     G183        0.6561471     0.007698872 #> 184          6 2018-06-02 09:07:00     G184        0.6638217     0.007699844 #> 185          6 2018-06-02 09:07:00     G185        0.6596904     0.007737100 #> 186          6 2018-06-02 09:07:00     G186        0.6537197     0.007729561 #> 187          6 2018-06-02 09:07:00     G187        0.6612610     0.008122376 #> 188          6 2018-06-02 09:07:00     G188        0.6583949     0.007698748 #> 189          6 2018-06-02 09:07:00     G189        0.6565257     0.007735060 #> 190          6 2018-06-02 09:07:00     G190        0.6707160     0.007737670 #> 191          6 2018-06-02 09:07:00     G191        0.6566763     0.007703687 #> 192          6 2018-06-02 09:07:00     G192        0.6732723     0.007707968 #> 193          6 2018-06-02 09:07:00   check1        0.6659502     0.004303533 #> 194          6 2018-06-02 09:07:00   check2        0.5895666     0.005915225 #> 195          6 2018-06-02 09:07:00   check3        0.6675627     0.005784187 #> 196          6 2018-06-02 09:07:00   check4        0.6745496     0.004242575 #>  #> $checkPred #> NULL #>  # }"},{"path":"/reference/getHerit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract heritabilities — getHerit","title":"Extract heritabilities — getHerit","text":"Extract heritabilities object class fitMod. geno.decomp used, heritabilities level geno.decomp stored separate columns.","code":""},{"path":"/reference/getHerit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract heritabilities — getHerit","text":"","code":"getHerit(fitMod, timePoints = names(fitMod), outFile = NULL)"},{"path":"/reference/getHerit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract heritabilities — getHerit","text":"fitMod object class fitMod. timePoints character numeric vector indicating time point(s) heritabilities extracted. using character string reference time point, value exact match one existing time points. using number matched number (\"timeNumber\") timePoints attribute TP object. outFile character string indicating .csv file results written. NULL file written.","code":""},{"path":"/reference/getHerit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract heritabilities — getHerit","text":"data.frame heritabilities per time point.","code":""},{"path":[]},{"path":"/reference/getHerit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract heritabilities — getHerit","text":"","code":"# \\donttest{ ## Using the first example dataset (PhenovatorDat1): phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49  ## Fit a SpATS model on few time points. modPhenoSp <- fitModels(TP = phenoTP,                         trait = \"EffpsII\",                         timePoints = c(1, 6, 20)) #> 2018-05-31 16:37:00 #> 2018-06-02 09:07:00 #> 2018-06-05 14:37:00  ## Extract the heritabilities for all available time points.#' getHerit(modPhenoSp) #>   timeNumber           timePoint   h2 #> 1          1 2018-05-31 16:37:00 0.70 #> 2          6 2018-06-02 09:07:00 0.71 #> 3         20 2018-06-05 14:37:00 0.88 # }"},{"path":"/reference/getTimePoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract time points — getTimePoints","title":"Extract time points — getTimePoints","text":"Function extracting data.frame timeNumbers timePoints object class TP fitMod.","code":""},{"path":"/reference/getTimePoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract time points — getTimePoints","text":"","code":"getTimePoints(x)"},{"path":"/reference/getTimePoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract time points — getTimePoints","text":"x object class TP fitMod","code":""},{"path":"/reference/getTimePoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract time points — getTimePoints","text":"data.frame columns timeNumber timePoint listing time points x","code":""},{"path":[]},{"path":"/reference/getTimePoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract time points — getTimePoints","text":"","code":"## Create an object of class TP. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49  ## Extract the time points from the object. head(getTimePoints(phenoTP)) #>   timeNumber           timePoint #> 1          1 2018-05-31 16:37:00 #> 2          2 2018-06-01 09:07:00 #> 3          3 2018-06-01 11:37:00 #> 4          4 2018-06-01 14:37:00 #> 5          5 2018-06-01 16:37:00 #> 6          6 2018-06-02 09:07:00"},{"path":"/reference/getVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variances — getVar","title":"Extract variances — getVar","text":"Extract variances object class fitMod.","code":""},{"path":"/reference/getVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variances — getVar","text":"","code":"getVar(fitMod, timePoints = names(fitMod), outFile = NULL)"},{"path":"/reference/getVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variances — getVar","text":"fitMod object class fitMod. timePoints character numeric vector indicating time point(s) variances extracted. using character string reference time point, value exact match one existing time points. using number matched number (\"timeNumber\") timePoints attribute TP object. outFile character string indicating .csv file results written. NULL file written.","code":""},{"path":"/reference/getVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variances — getVar","text":"data.frame variances per time point.","code":""},{"path":[]},{"path":"/reference/getVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variances — getVar","text":"","code":"# \\donttest{ ## Using the first example dataset (PhenovatorDat1): phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49  ## Fit a SpATS model on few time points. modPhenoSp <- fitModels(TP = phenoTP,                         trait = \"EffpsII\",                         timePoints = c(1, 6, 20)) #> 2018-05-31 16:37:00 #> 2018-06-02 09:07:00 #> 2018-06-05 14:37:00  ## Extract the variances for all available time points. getVar(modPhenoSp) #>   timeNumber           timePoint       varGen       varRes       varCol #> 1          1 2018-05-31 16:37:00 0.0002565400 0.0007483918 1.199643e-05 #> 2          6 2018-06-02 09:07:00 0.0002019810 0.0005521569 6.760718e-07 #> 3         20 2018-06-05 14:37:00 0.0002663746 0.0002319816 5.434449e-06 #>         varRow #> 1 8.493845e-05 #> 2 5.966676e-05 #> 3 6.425597e-05 # }"},{"path":"/reference/noCorrectedRoot.html","id":null,"dir":"Reference","previous_headings":"","what":"Root data corrected for outliers for single observations. — noCorrectedRoot","title":"Root data corrected for outliers for single observations. — noCorrectedRoot","text":"dataset contains corrected data obtained removing outliers single observations RootDat1 dataset. See vignettes details.","code":""},{"path":"/reference/noCorrectedRoot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Root data corrected for outliers for single observations. — noCorrectedRoot","text":"","code":"noCorrectedRoot"},{"path":"/reference/noCorrectedRoot.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Root data corrected for outliers for single observations. — noCorrectedRoot","text":"data.frame 15,934 rows 8 columns: timePoint Original time points, date time Date Date thermalTime Thermal time cumulated Exp Experiment number genotype Genotypes Tank Tank greenhouse plotId Unique pot ID using rowcol coordinates rowId Row coordinate colId Column coordinate tipPos_y Position root tip y axis","code":""},{"path":"/reference/plot.HTPSpline.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a fitted spline. — plot.HTPSpline","title":"Plot the results of a fitted spline. — plot.HTPSpline","text":"Plot results fitted spline.","code":""},{"path":"/reference/plot.HTPSpline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a fitted spline. — plot.HTPSpline","text":"","code":"# S3 method for class 'HTPSpline' plot(   x,   ...,   plotType = c(\"predictions\", \"derivatives\", \"derivatives2\"),   genotypes = NULL,   plotIds = NULL,   title = NULL,   output = TRUE,   outFile = NULL,   outFileOpts = NULL )"},{"path":"/reference/plot.HTPSpline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a fitted spline. — plot.HTPSpline","text":"x object class HTPSpline. ... Ignored. plotType character string indicating spline component plotted, either predictions, derivatives second derivatives (\"derivatives2\"). genotypes character vector indicating genotypes spline components plotted. plotIds character vector indicating plotIds spline components plotted. title character string used title plot. NULL default title added plot depending plotType. output plot output current device? FALSE (list ) ggplot object(s) invisibly returned. Ignored outFile specified. outFile character string indicating .pdf file plots written. NULL, file written. outFileOpts named list extra options pdf outfile, e.g. width height. See pdf possible options.","code":""},{"path":"/reference/plot.HTPSpline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a fitted spline. — plot.HTPSpline","text":"list object class ggplot invisibly returned.","code":""},{"path":[]},{"path":"/reference/plot.HTPSpline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a fitted spline. — plot.HTPSpline","text":"","code":"## The data from the Phenovator platform have been corrected for spatial ## trends and outliers for single observations have been removed.  ## Fit P-Splines on a subset of genotypes subGeno <- c(\"G070\", \"G160\") fit.spline <- fitSpline(inDat = spatCorrectedVator,                         trait = \"EffpsII_corr\",                         genotypes = subGeno,                         knots = 50)  ## Visualize the P-Spline predictions for one genotype. plot(fit.spline, genotypes = \"G160\")   ## Visualize the first and second derivatives of the predictions for one plant. plot(fit.spline, plotIds = \"c10r29\", plotType =  \"derivatives\")  plot(fit.spline, plotIds = \"c10r29\", plotType =  \"derivatives2\")"},{"path":"/reference/plot.TP.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for class TP — plot.TP","title":"Plot function for class TP — plot.TP","text":"Plotting function objects class TP. Plots layout platform different time points within TP object. Also boxplot can made selected traits time points plot correlations time points. Finally raw data can displayed per genotype. detailed description optional extra parameters different plots given sections .","code":""},{"path":"/reference/plot.TP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for class TP — plot.TP","text":"","code":"# S3 method for class 'TP' plot(   x,   ...,   plotType = c(\"layout\", \"box\", \"cor\", \"raw\"),   timePoints = names(x),   title = NULL,   traits = NULL,   output = TRUE,   outFile = NULL,   outFileOpts = NULL )"},{"path":"/reference/plot.TP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for class TP — plot.TP","text":"x object class TP. ... Extra plot options. Described per plotType respective section. plotType single character string indicating plot made. See sections detailed explanation plots. timePoints character numeric vector indicating time points plotted. using character string reference time point, value exact match one existing timePoints. using number matched number (\"timeNumber\") timePoints attribute TP object. title character string used title plot. NULL default title added plot depending plotType. traits character vector indicating traits plotted. plotType = \"layout\" single trait may plotted. plotTypes, providing multiple traits create multiple plots. output plot output current device? FALSE (list ) ggplot object(s) invisibly returned. Ignored outFile specified. outFile character string indicating .pdf file plots written. NULL, file written. outFileOpts named list extra options pdf outfile, e.g. width height. See pdf possible options.","code":""},{"path":"/reference/plot.TP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for class TP — plot.TP","text":"Depending plot type, either ggplot object list ggplot objects invisibly returned.","code":""},{"path":"/reference/plot.TP.html","id":"layout-plot","dir":"Reference","previous_headings":"","what":"Layout Plot","title":"Plot function for class TP — plot.TP","text":"Plots layout platform selected time points (available time points  default). plot can made time points contain row (rowNum) column (colNum) information. either one missing timePoint skipped warning. replicates (repId) available, black line plotted diffent replicates. Missing plots indicated white. can either single plots time point complete missing columns rows. Extra parameter options: showGeno individual genotypes labeled plot? Defaults FALSE highlight character vector genotypes highlighted plot.","code":""},{"path":"/reference/plot.TP.html","id":"box-plot","dir":"Reference","previous_headings":"","what":"Box Plot","title":"Plot function for class TP — plot.TP","text":"Creates boxplot per selected trait grouped time point (available time points  default). Extra parameter options: groupBy character string indicating column TP boxes plot grouped. default boxes grouped per time point. colorBy character string indicating column TP boxes colored. Coloring done within groups indicated groupBy parameter, e.g. per replicate within time point using repId. orderBy character string indicating way boxes ordered. Either \"alphabetic\" alphabetical ordering groups, \"ascending\" ordering ascending mean, \"descending\" ordering descending mean. default boxes ordered alphabetically.","code":""},{"path":"/reference/plot.TP.html","id":"correlation-plot","dir":"Reference","previous_headings":"","what":"Correlation Plot","title":"Plot function for class TP — plot.TP","text":"Draws heatmap correlations raw data time points per selected trait selected time points (available time points default).","code":""},{"path":"/reference/plot.TP.html","id":"raw-data-plot","dir":"Reference","previous_headings":"","what":"Raw data plot","title":"Plot function for class TP — plot.TP","text":"Create plot raw data selected trait time selected time points (available time points default). Plots grouped genotype, genotype x treatment geno.decomp option specified. default, genotypes plotted might take time memory output saved file (see parameter outFile). Extra parameter options: genotypes character vector indicating genotypes plotted. geno.decomp character vector indicating grouping genotypes plotted. plotLine data displayed lines? Default FALSE.","code":""},{"path":[]},{"path":"/reference/plot.TP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for class TP — plot.TP","text":"","code":"# \\donttest{ ## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49  ## Plot the layout for the third time point with the check genotypes ## highlighted plot(phenoTP,      plotType = \"layout\",      timePoints = 3,      highlight = c(\"check1\", \"check2\", \"check3\", \"check4\"))   ## Create a boxplot for \"EffpsII\" with 5 time points and boxes colored ## by \"repId\" within time point. plot(phenoTP,      plotType = \"box\",      traits = \"EffpsII\",      timePoints = 1:5,      colorBy = \"repId\")   ## Create a correlation plot for \"EffpsII\" for a selection of time points. plot(phenoTP,      plotType = \"cor\",      traits = \"EffpsII\",      timePoints = seq(from=1, to=73, by=5))   ## Plot the raw data of four genotypes for the trait \"EffpsII\": plot(phenoTP,      traits = \"EffpsII\",      plotType = \"raw\",      genotypes = c(\"G001\",\"G002\",\"check1\",\"check2\"))  # }"},{"path":"/reference/plot.fitMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for class fitMod — plot.fitMod","title":"Plot function for class fitMod — plot.fitMod","text":"Plotting function objects class fitMod. Seven different types plots can made object class fitMod. detailed description optional extra parameters different plots given sections .","code":""},{"path":"/reference/plot.fitMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for class fitMod — plot.fitMod","text":"","code":"# S3 method for class 'fitMod' plot(   x,   ...,   plotType = c(\"rawPred\", \"corrPred\", \"herit\", \"effDim\", \"variance\", \"timeLapse\",     \"spatial\"),   timePoints = names(x),   title = NULL,   output = TRUE,   outFile = NULL,   outFileOpts = NULL )"},{"path":"/reference/plot.fitMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for class fitMod — plot.fitMod","text":"x object class fitMod. ... Extra plot options. Described per plotType respective section. plotType single character string indicating plot made. See sections detailed explanation plots. timePoints character numeric vector indicating time points plotted. using character string reference time point, value exact match one existing timePoints. using number matched number (\"timeNumber\") timePoints attribute TP object. title character string used title plot. NULL default title added plot depending plotType. output plot output current device? FALSE (list ) ggplot object(s) invisibly returned. Ignored outFile specified. outFile character string indicating .pdf file .gif file (plotType = \"timeLapse\") plots written. outFileOpts named list extra options pdf outfile, e.g. width height. See pdf possible options.","code":""},{"path":"/reference/plot.fitMod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function for class fitMod — plot.fitMod","text":"Depending plot type either ggplot object list ggplot objects invisibly returned.","code":""},{"path":"/reference/plot.fitMod.html","id":"rawpred-plot","dir":"Reference","previous_headings":"","what":"rawPred plot","title":"Plot function for class fitMod — plot.fitMod","text":"Plots raw data (colored dots) overlayed predicted values fitted model (black dots). genotype plot made per plot/plant time. plots put together 5x5 grid. using parameter genotypes selection genotypes can plotted. Extra parameter options: genotypes character vector indicating genotypes plotted. plotChecks check genotypes included plot? plotLine data displayed lines? Default FALSE.","code":""},{"path":"/reference/plot.fitMod.html","id":"corrpred-plot","dir":"Reference","previous_headings":"","what":"corrPred plot","title":"Plot function for class fitMod — plot.fitMod","text":"Plots spatially corrected data (colored dots) overlayed predicted values fitted model (black dors). genotype plot made per plot/plant time. plots put together 5x5 grid. using parameter genotypes selection genotypes can plotted. Extra parameter options: genotypes character vector indicating genotypes plotted. plotChecks check genotypes included plot? plotLine data displayed lines? Default FALSE.","code":""},{"path":"/reference/plot.fitMod.html","id":"herit-plot","dir":"Reference","previous_headings":"","what":"herit plot","title":"Plot function for class fitMod — plot.fitMod","text":"Plots heritability time. plot available genotype fitted random factor model. geno.decomp used fitting model, heritabilities plotted level geno.decomp single plot. Extra parameter options: yLim numerical vector length two, used setting limits y-axis plot. values outside plotting range given, ignored.","code":""},{"path":"/reference/plot.fitMod.html","id":"effdim-plot","dir":"Reference","previous_headings":"","what":"effDim plot","title":"Plot function for class fitMod — plot.fitMod","text":"Plots effective dimension time models fitted using SpATS. Extra parameter options: whichED character vector indicating effective dimensions plotted. subset \"colId\", \"rowId\", \"fCol\", \"fRow\", \"fColRow\", \"colfRow\", \"fColfRow\" \"surface\". useRepId = TRUE, effective dimensions \"colId\" \"rowId\" become \"RepId:colId\" \"RepId:rowId\". Default effective dimensions plotted. EDType character string specifying effective dimension (\"dimension\") ratio effective dimensions (\"ratio\") plotted. Default dimensions plotted. yLim numerical vector length two, used setting limits y-axis plot. values outside plotting range given, ignored.","code":""},{"path":"/reference/plot.fitMod.html","id":"variance-plot","dir":"Reference","previous_headings":"","what":"variance plot","title":"Plot function for class fitMod — plot.fitMod","text":"Plots residual, column row variances time fitted models. Extra parameter options: yLim numerical vector length two, used setting limits y-axis plot. values outside plotting range given, ignored.","code":""},{"path":"/reference/plot.fitMod.html","id":"timelapse-plot","dir":"Reference","previous_headings":"","what":"timeLapse plot","title":"Plot function for class fitMod — plot.fitMod","text":"Creates time lapse spatial trends models fitted using SpATS time.","code":""},{"path":"/reference/plot.fitMod.html","id":"spatial-plot","dir":"Reference","previous_headings":"","what":"spatial plot","title":"Plot function for class fitMod — plot.fitMod","text":"Creates five plots per time point, spatial plots raw data, fitted values, residuals either BLUEs BLUPs, histogram BLUEs BLUPs. SpATS used modeling extra plot fitted spatial trend included Extra parameter options: spaTrend character string indicating spatial trend displayed. Either \"raw\" raw values, \"percentage\" displaying percentage original phenotypic values.","code":""},{"path":[]},{"path":"/reference/plot.fitMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for class fitMod — plot.fitMod","text":"","code":"# \\donttest{ ## Using the first example dataset (PhenovatorDat1): ## Create an object of class TP. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49  ## Fit a SpATS model on three points: modPhenoSp <- fitModels(TP = phenoTP,                         trait = \"EffpsII\",                         timePoints = c(1, 6, 36)) #> 2018-05-31 16:37:00 #> 2018-06-02 09:07:00 #> 2018-06-09 14:37:00  ## Plot the spatial trends for one time point: plot(modPhenoSp,      timePoints = 36,      plotType = \"spatial\",      spaTrend = \"percentage\")  # }  if (FALSE) { # \\dontrun{ ## Create a time lapse of all available time points: plot(modPhenoSp,      plotType = \"timeLapse\",      outFile = \"TimeLapse_modPhenoSp.gif\") } # }  # \\donttest{ ## Plot the corrected values for a subset of four genotypes: plot(modPhenoSp,      plotType = \"corrPred\",      genotypes = c(\"check1\", \"check2\", \"G007\", \"G058\") )   ## Plot the effective dimensions of all available time points in the model ## for a subset of effective dimensions: plot(modPhenoSp,      plotType = \"effDim\",      whichED = c(\"colId\", \"rowId\", \"fColRow\",\"colfRow\"),      EDType = \"ratio\")  # }"},{"path":"/reference/plot.psHDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for class psHDM — plot.psHDM","title":"Plot function for class psHDM — plot.psHDM","text":"plot function provides five plots objects class psHDM fitting (fitSplineHDM) predicting (predict.psHDM): (1) Population-specific growth curves (popTra), (2) Population genotype-specific growth curves (genotypes, popGenoTra), (3) First-order derivative population genotype-specific growth curves (genotypes, popGenoDeriv), (4) Genotype-specific deviations (genotypes, genoDev), (5) Genotype- plot-specific growth curves (selection genotypes, genoPlotTra). standard errors available, 95% point wise confidence intervals depicted.","code":""},{"path":"/reference/plot.psHDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for class psHDM — plot.psHDM","text":"","code":"# S3 method for class 'psHDM' plot(   x,   ...,   plotType = c(\"popTra\", \"popGenoTra\", \"popGenoDeriv\", \"genoDev\", \"genoPlotTra\"),   genotypes = NULL,   genotypeNames = NULL,   genotypeOrder = NULL,   xlab = \"Time\",   ylab = expression(tilde(y)[pgi](t)),   title = NULL,   themeSizeHDM = 15,   output = TRUE,   outFile = NULL,   outFileOpts = NULL )"},{"path":"/reference/plot.psHDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for class psHDM — plot.psHDM","text":"x object class \"psHDM\" obtained fitting (fitSplineHDM) predicting (predict.psHDM), ... used. plotType character string indicating plot made. genotypes character vector genotypes plots plot level desired. used plotType == \"genoPlotTra\". genotypeNames character vector alternative names plotted genotypes (genotypes). NULL names genotypes used. used plotType == \"genoPlotTra\". genotypeOrder vector order selected genotypes (genotypes). NULL order data preserved. used plotType == \"genoPlotTra\". xlab x-axis label plot. ylab y-axis label plot. title character string used title plot. NULL default title added plot depending plotType. themeSizeHDM Reference size theme output plot output current device? FALSE (list ) ggplot object(s) invisibly returned. Ignored outFile specified. outFile character string indicating .pdf file plots written. NULL, file written. outFileOpts named list extra options pdf outfile, e.g. width height. See pdf possible options.","code":""},{"path":"/reference/plot.psHDM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot function for class psHDM — plot.psHDM","text":"Pérez-Valencia, D.M., Rodríguez-Álvarez, M.X., Boer, M.P. et al. two-stage approach spatio-temporal analysis high-throughput phenotyping data. Sci Rep 12, 3177 (2022). doi:10.1038/s41598-022-06935-9","code":""},{"path":[]},{"path":"/reference/plot.psHDM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for class psHDM — plot.psHDM","text":"","code":"## The data from the Phenovator platform have been corrected for spatial ## trends and outliers for single observations have been removed.  ## We need to specify the genotype-by-treatment interaction. ## Treatment: water regime (WW, WD). spatCorrectedArch[[\"treat\"]] <- substr(spatCorrectedArch[[\"geno.decomp\"]],                                       start = 1, stop = 2) spatCorrectedArch[[\"genoTreat\"]] <-   interaction(spatCorrectedArch[[\"genotype\"]],              spatCorrectedArch[[\"treat\"]], sep = \"_\")  ## Fit P-Splines Hierarchical Curve Data Model for selection of genotypes. fit.psHDM  <- fitSplineHDM(inDat = spatCorrectedArch,                           trait = \"LeafArea_corr\",                           genotypes = c(\"GenoA14_WD\", \"GenoA51_WD\",                                        \"GenoB11_WW\", \"GenoB02_WD\",                                        \"GenoB02_WW\"),                           time = \"timeNumber\",                           pop = \"geno.decomp\",                           genotype = \"genoTreat\",                           plotId = \"plotId\",                           difVar = list(geno = FALSE, plot = FALSE),                           smoothPop = list(nseg = 4, bdeg = 3, pord = 2),                           smoothGeno = list(nseg = 4, bdeg = 3, pord = 2),                           smoothPlot = list(nseg = 4, bdeg = 3, pord = 2),                           weights = \"wt\",                           trace = FALSE)  ## Plot the P-Spline predictions at the three levels of the hierarchy  ## Population-specific growth curves. plot(fit.psHDM,     plotType = \"popTra\")   ## Population and genotype-specific growth curves. plot(fit.psHDM,     plotType = \"popGenoTra\")   ## First-order derivative of the population- and genotype-specific growth curves. plot(fit.psHDM,     plotType = \"popGenoDeriv\")   ## Genotype-specific deviations. plot(fit.psHDM,     plotType = \"genoDev\")   ## Genotype- and plot-specific growth curves. plot(fit.psHDM,     plotType = \"genoPlotTra\")"},{"path":"/reference/plot.serieOut.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot outliers for series of observations — plot.serieOut","title":"Plot outliers for series of observations — plot.serieOut","text":"Plot fitted spline, correlation matrix PCA biplot genotypes. Outlying series observations shown filled dots fitted spline plot, observations shown open dots.","code":""},{"path":"/reference/plot.serieOut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot outliers for series of observations — plot.serieOut","text":"","code":"# S3 method for class 'serieOut' plot(   x,   ...,   reason = c(\"mean corr\", \"angle\", \"slope\"),   genotypes = NULL,   geno.decomp = NULL,   useTimeNumber = FALSE,   timeNumber = NULL,   title = NULL,   output = TRUE )"},{"path":"/reference/plot.serieOut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot outliers for series of observations — plot.serieOut","text":"x object class serieOut. ... Ignored. reason character vector indicating types outliers plotted. genotypes character vector indicating genotypes plotted. NULL genotypes plotted. geno.decomp character vector indicating levels geno.decomp plotted. NULL levels plotted. Ignored geno.decomp used fitting models. useTimeNumber timeNumber used instead timePoint labels x-axis? timeNumber useTimeNumber = TRUE, character vector indicating column containing numerical time use. title character string used title plot. NULL default title added plot depending plotType. output plot output current device? FALSE (list ) ggplot object(s) invisibly returned. Ignored outFile specified.","code":""},{"path":"/reference/plot.serieOut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot outliers for series of observations — plot.serieOut","text":"list ggplot objects invisibly returned.","code":""},{"path":[]},{"path":"/reference/plot.serieOut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot outliers for series of observations — plot.serieOut","text":"","code":"# \\donttest{ ## The data from the Phenovator platform have been corrected for spatial ## trends and outliers for single observations have been removed.  ## Fit P-splines on a subset of genotypes subGenoVator <- c(\"G160\", \"G151\") fit.spline <- fitSpline(inDat = spatCorrectedVator,                         trait = \"EffpsII_corr\",                         genotypes = subGenoVator,                         knots = 50)  ## Extract the data.frames with predicted values and P-Spline coefficients. predDat <- fit.spline$predDat coefDat <- fit.spline$coefDat  ## The coefficients are then used to tag suspect time courses. outVator <- detectSerieOut(corrDat = spatCorrectedVator,                            predDat = predDat,                            coefDat = coefDat,                            trait = \"EffpsII_corr\",                            genotypes = subGenoVator,                            thrCor = 0.9,                            thrPca = 30,                            thrSlope = 0.7)  ## The `outVator` can be visualized for selected genotypes. plot(outVator, genotypes = \"G151\")   ## Only visualize outliers tagged because of low correlation ## between slopes of the regression. plot(outVator, genotypes = \"G151\", reason = \"slope\")  # }"},{"path":"/reference/plot.singleOut.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot outliers for single observations — plot.singleOut","title":"Plot outliers for single observations — plot.singleOut","text":"Plot fitted local regression, confidence intervals detected outliers plotId.","code":""},{"path":"/reference/plot.singleOut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot outliers for single observations — plot.singleOut","text":"","code":"# S3 method for class 'singleOut' plot(x, ..., plotIds = NULL, outOnly = TRUE, output = TRUE)"},{"path":"/reference/plot.singleOut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot outliers for single observations — plot.singleOut","text":"x object class singleOut. ... Ignored. plotIds character vector plotIds outliers detected. NULL, plotIds TP used. outOnly plots containing outliers plotted? output plot output current device? FALSE (list ) ggplot object(s) invisibly returned. Ignored outFile specified.","code":""},{"path":"/reference/plot.singleOut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot outliers for single observations — plot.singleOut","text":"list ggplot objects invisibly returned.","code":""},{"path":[]},{"path":"/reference/plot.singleOut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot outliers for single observations — plot.singleOut","text":"","code":"## Create a TP object containing the data from the Phenovator. PhenovatorDat1 <- PhenovatorDat1[!PhenovatorDat1$pos %in%                                  c(\"c24r41\", \"c7r18\", \"c7r49\"), ] phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\"))  ## Select a subset of plants, for example here 9 plants. plantSel <- phenoTP[[1]]$plotId[1:9] # Then run on the subset. resuVatorHTP <- detectSingleOut(TP = phenoTP,                                trait = \"EffpsII\",                                plotIds = plantSel,                                confIntSize = 3,                                nnLocfit = 0.1)  ## Visualize the prediction by choosing a single plant... plot(resuVatorHTP, plotIds = \"c21r24\", outOnly = FALSE)  ## ...or a subset of plants. plot(resuVatorHTP, plotIds = plantSel, outOnly = FALSE)"},{"path":"/reference/plot.splineEst.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of estimated spline parameters. — plot.splineEst","title":"Plot the results of estimated spline parameters. — plot.splineEst","text":"Plot results estimated spline parameters.","code":""},{"path":"/reference/plot.splineEst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of estimated spline parameters. — plot.splineEst","text":"","code":"# S3 method for class 'splineEst' plot(   x,   ...,   plotType = c(\"box\", \"hist\"),   what = attr(x, \"what\"),   title = NULL,   output = TRUE,   outFile = NULL,   outFileOpts = NULL )"},{"path":"/reference/plot.splineEst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of estimated spline parameters. — plot.splineEst","text":"x object class splineEst ... Ignored. plotType character string indicating type plot made. types estimate plotted. title character string used title plot. NULL default title added plot depending plotType. output plot output current device? FALSE (list ) ggplot object(s) invisibly returned. Ignored outFile specified. outFile character string indicating .pdf file plots written. NULL, file written. outFileOpts named list extra options pdf outfile, e.g. width height. See pdf possible options.","code":""},{"path":"/reference/plot.splineEst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of estimated spline parameters. — plot.splineEst","text":"list objects class ggplot invisibly returned.","code":""},{"path":[]},{"path":"/reference/predict.psHDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the P-Splines Hierarchical Curve Data Model — predict.psHDM","title":"Predict the P-Splines Hierarchical Curve Data Model — predict.psHDM","text":"Function predicts P-spline Hierarchical Curve Data Model (see fitSplineHDM) dense grid. provides standard errors curves level hierarchy. User aware standard errors plot level demand large memory. suggest set option FALSE level","code":""},{"path":"/reference/predict.psHDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the P-Splines Hierarchical Curve Data Model — predict.psHDM","text":"","code":"# S3 method for class 'psHDM' predict(   object,   newtimes,   pred = list(pop = TRUE, geno = TRUE, plot = TRUE),   se = list(pop = TRUE, geno = TRUE, plot = FALSE),   trace = TRUE,   ... )"},{"path":"/reference/predict.psHDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the P-Splines Hierarchical Curve Data Model — predict.psHDM","text":"object object class \"psHDM\" obtained fitting (fitSplineHDM) P-spline Hierarchical Curve Data Model newtimes numeric vector timepoints predictions desired pred list controls hierarchical levels predictions desired (population/genotypes/plots).  default TRUE. se list controls hierarchical levels standard errors desired (population/genotypes/plots).  default TRUE except plot level. trace optional value controls function trace. default TRUE. ... used.","code":""},{"path":"/reference/predict.psHDM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the P-Splines Hierarchical Curve Data Model — predict.psHDM","text":"object class psHDM, list following outputs: predict.psHDM newtimes numeric vector timepoints predictions /standard errors obtained. popLevel data.frame estimated population trajectories first second order derivatives, required respective standard errors, newtimes. genoLevel data.frame estimated genotype-specific deviations trajectories respective first second order derivatives, required respective standard errors, newtimes. plotLevel data.frame estimated plot-specific deviations trajectories respective first second order derivatives, required respective standard errors, newtimes. plotObs data.frame raw data original timepoints.","code":""},{"path":"/reference/predict.psHDM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict the P-Splines Hierarchical Curve Data Model — predict.psHDM","text":"Pérez-Valencia, D.M., Rodríguez-Álvarez, M.X., Boer, M.P. et al. two-stage approach spatio-temporal analysis high-throughput phenotyping data. Sci Rep 12, 3177 (2022). doi:10.1038/s41598-022-06935-9","code":""},{"path":[]},{"path":"/reference/predict.psHDM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the P-Splines Hierarchical Curve Data Model — predict.psHDM","text":"","code":"## The data from the Phenovator platform have been corrected for spatial ## trends and outliers for single observations have been removed.  ## We need to specify the genotype-by-treatment interaction. ## Treatment: water regime (WW, WD). spatCorrectedArch[[\"treat\"]] <- substr(spatCorrectedArch[[\"geno.decomp\"]],                                       start = 1, stop = 2) spatCorrectedArch[[\"genoTreat\"]] <-   interaction(spatCorrectedArch[[\"genotype\"]],              spatCorrectedArch[[\"treat\"]], sep = \"_\")  ## Fit P-Splines Hierarchical Curve Data Model for selection of genotypes. fit.psHDM  <- fitSplineHDM(inDat = spatCorrectedArch,                           trait = \"LeafArea_corr\",                           genotypes = c(\"GenoA14_WD\", \"GenoA51_WD\",                                        \"GenoB11_WW\", \"GenoB02_WD\",                                        \"GenoB02_WW\"),                           time = \"timeNumber\",                           pop = \"geno.decomp\",                           genotype = \"genoTreat\",                           plotId = \"plotId\",                           difVar = list(geno = FALSE, plot = FALSE),                           smoothPop = list(nseg = 4, bdeg = 3, pord = 2),                           smoothGeno = list(nseg = 4, bdeg = 3, pord = 2),                           smoothPlot = list(nseg = 4, bdeg = 3, pord = 2),                           weights = \"wt\",                           trace = FALSE)  ## Predict the P-Splines Hierarchical Curve Data Model on a dense grid ## with standard errors at the population and genotype levels pred.psHDM <- predict(object = fit.psHDM,                      newtimes = seq(min(fit.psHDM$time[[\"timeNumber\"]]),                                    max(fit.psHDM$time[[\"timeNumber\"]]),                                    length.out = 100),                      pred = list(pop = TRUE, geno = TRUE, plot = TRUE),                      se = list(pop = TRUE, geno = TRUE, plot = FALSE)) #> [1] \"Population-specific growth curves OK\" #> [1] \"Standard errors for population-specific growth curves OK\" #> [1] \"Genotype-specific deviations OK\" #> [1] \"Genotype-specific growth curves OK\" #> [1] \"Standard errors for genotype-specific deviations OK\" #> [1] \"Standard errors for genotype-specific growth curves OK\" #> [1] \"Plot-specific deviations OK\" #> [1] \"Plot-specific growth curves OK\"  ## Plot the P-Spline predictions at the three levels of the hierarchy  ## Plots at population level. plot(pred.psHDM,     plotType = \"popTra\")   ## Plots at genotype level. plot(pred.psHDM,     plotType = \"popGenoTra\")   ## Plots of derivatives at genotype level. plot(pred.psHDM,     plotType = \"popGenoDeriv\")   ## Plots of deviations at genotype level. plot(pred.psHDM,     plotType = \"genoDev\")   ## Plots at plot level. plot(pred.psHDM,     plotType = \"genoPlotTra\")"},{"path":"/reference/removeSerieOut.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace outliers for series of observations by NA — removeSerieOut","title":"Replace outliers for series of observations by NA — removeSerieOut","text":"Function replacing outliers series observations data NA. input can either data.frame, specified dat, output fitSpline function, specified fitSpline. Exactly one provided input function.","code":""},{"path":"/reference/removeSerieOut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace outliers for series of observations by NA — removeSerieOut","text":"","code":"removeSerieOut(   dat = NULL,   fitSpline = NULL,   serieOut,   reason = c(\"mean corr\", \"angle\", \"slope\"),   traits = attr(x = serieOut, which = \"trait\") )"},{"path":"/reference/removeSerieOut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace outliers for series of observations by NA — removeSerieOut","text":"dat data.frame. fitSpline object class HTPSpline, output fitSpline function. serieOut data.frame least column plotId values corresponding dat/fitSpline. reason character vector indicating types outliers replaced NA. traits traits replaced NA. using output detectSerieOut input serieOut defaults trait used detecting outliers.","code":""},{"path":"/reference/removeSerieOut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace outliers for series of observations by NA — removeSerieOut","text":"Depending input either data.frame object class HTPSpline outliers specified serieOut replaced NA.","code":""},{"path":[]},{"path":"/reference/removeSerieOut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace outliers for series of observations by NA — removeSerieOut","text":"","code":"## Run the function to fit P-splines on a subset of genotypes. subGenoVator <- c(\"G160\", \"G151\") fit.spline <- fitSpline(inDat = spatCorrectedVator,                         trait = \"EffpsII_corr\",                         genotypes = subGenoVator,                         knots = 50)  ## Extract the tables of predicted values and P-spline coefficients. predDat <- fit.spline$predDat coefDat <- fit.spline$coefDat  ## The coefficients are then used to tag suspect time courses outVator <- detectSerieOut(corrDat = spatCorrectedVator,                            predDat = predDat,                            coefDat = coefDat,                            trait = \"EffpsII_corr\",                            genotypes = subGenoVator,                            thrCor = 0.9,                            thrPca = 30,                            thrSlope = 0.7)  ## Replace the outliers by NA in the corrected data. spatCorrectedVatorOut <- removeSerieOut(dat = spatCorrectedVator,                                         serieOut = outVator)  ## Only replace the slope outliers by NA in the corrected data. spatCorrectedVatorOut2 <- removeSerieOut(dat = spatCorrectedVator,                                         serieOut = outVator,                                         reason = \"slope\")  ## Replace the outliers by NA in the corrected data. ## Replace both the corrected value and the raw trait value by NA. spatCorrectedVatorOut3 <-   removeSerieOut(dat = spatCorrectedVator,                  serieOut = outVator,                  traits = c(\"EffpsII\", \"EffpsII_corr\"))"},{"path":"/reference/removeSingleOut.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace outliers for single observations by NA — removeSingleOut","title":"Replace outliers for single observations by NA — removeSingleOut","text":"Function replacing outliers single observations NA.","code":""},{"path":"/reference/removeSingleOut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace outliers for single observations by NA — removeSingleOut","text":"","code":"removeSingleOut(TP, singleOut, trait = attr(x = singleOut, which = \"trait\"))"},{"path":"/reference/removeSingleOut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace outliers for single observations by NA — removeSingleOut","text":"TP object class TP. singleOut data.frame least columns plotId timePoint values corresponding TP. column outlier present, output detectSingleOut, plotId x timePoint combinations outlier = 1 set NA. column outlier present, observations singleOut set NA. trait trait set NA. Can ignored using output detectSingleOut input.","code":""},{"path":"/reference/removeSingleOut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace outliers for single observations by NA — removeSingleOut","text":"object class TP, input outlier replaced NA.","code":""},{"path":[]},{"path":"/reference/removeSingleOut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace outliers for single observations by NA — removeSingleOut","text":"","code":"## Create a TP object containing the data from the Phenovator. PhenovatorDat1 <- PhenovatorDat1[!PhenovatorDat1$pos %in%                                  c(\"c24r41\", \"c7r18\", \"c7r49\"), ] phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\"))  ## First select a subset of plants, for example here 9 plants. plantSel <- phenoTP[[1]]$plotId[1:9] # Then run on the subset resuVatorHTP <- detectSingleOut(TP = phenoTP,                                 trait = \"EffpsII\",                                 plotIds = plantSel,                                 confIntSize = 3,                                 nnLocfit = 0.1)  ## Replace the studied trait by NA for the plants marked as outliers. phenoTPOut <- removeSingleOut(phenoTP, resuVatorHTP)"},{"path":"/reference/removeTimePoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove time points from an object of class TP — removeTimePoints","title":"Remove time points from an object of class TP — removeTimePoints","text":"Function removing selected time points object class TP.","code":""},{"path":"/reference/removeTimePoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove time points from an object of class TP — removeTimePoints","text":"","code":"removeTimePoints(TP, timePoints)"},{"path":"/reference/removeTimePoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove time points from an object of class TP — removeTimePoints","text":"TP object class TP. timePoints character numeric vector indicating time points removed. using character string reference time point, value exact match one existing timePoints. using number matched number (\"timeNumber\") timePoints attribute TP object.","code":""},{"path":"/reference/removeTimePoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove time points from an object of class TP — removeTimePoints","text":"object class TP, input selected time points removed.","code":""},{"path":[]},{"path":"/reference/removeTimePoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove time points from an object of class TP — removeTimePoints","text":"","code":"## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\",\"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49 ## Remove the first and last time point from the TP object. phenoTPNew <- removeTimePoints(phenoTP,                                timePoints = c(1, 73))  ## Compare by looking at summaries. summary(phenoTP) #> phenoTP contains data for experiment Phenovator. #>  #> It contains 73 time points. #> First time point: 2018-05-31 16:37:00  #> Last time point: 2018-06-18 16:37:00  #>  #> The following genotypes are defined as check genotypes: check1, check2, check3, check4. summary(phenoTPNew) #> phenoTPNew contains data for experiment Phenovator. #>  #> It contains 71 time points. #> First time point: 2018-06-01 09:07:00  #> Last time point: 2018-06-18 14:37:00  #>  #> No check genotypes are defined."},{"path":"/reference/spatCorrectedArch.html","id":null,"dir":"Reference","previous_headings":"","what":"Maize data corrected for spatial trends. — spatCorrectedArch","title":"Maize data corrected for spatial trends. — spatCorrectedArch","text":"dataset contains corrected data obtained (1) removing outliers single observations (2) running spatial model PhenoarchDat1 dataset. See vignettes details.","code":""},{"path":"/reference/spatCorrectedArch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maize data corrected for spatial trends. — spatCorrectedArch","text":"","code":"spatCorrectedArch"},{"path":"/reference/spatCorrectedArch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Maize data corrected for spatial trends. — spatCorrectedArch","text":"data.frame 37,038 rows 9 columns: timeNumber Time number obtained formatting original dataset function createTP. timePoint Original time point. LeafArea_corr Leaf area, corrected data LeafArea Leaf area picture, raw data wt Weight factor genotype Genotypes geno.decomp Combination treatment levels decompose genotypic variance (see vignettes) colId Column coordinate rowId Row coordinate plotId Unique pot ID using rowcol coordinates","code":""},{"path":"/reference/spatCorrectedVator.html","id":null,"dir":"Reference","previous_headings":"","what":"Arabidopsis data corrected for spatial trends. — spatCorrectedVator","title":"Arabidopsis data corrected for spatial trends. — spatCorrectedVator","text":"dataset contains corrected data obtained (1) removing outliers single observations (2) running spatial model PhenovatorDat1 dataset. See vignettes details.","code":""},{"path":"/reference/spatCorrectedVator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arabidopsis data corrected for spatial trends. — spatCorrectedVator","text":"","code":"spatCorrectedVator"},{"path":"/reference/spatCorrectedVator.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Arabidopsis data corrected for spatial trends. — spatCorrectedVator","text":"data.frame 103,801 rows 11 columns: timeNumber Time number obtained formatting original dataset function createTP. timePoint Original time point. EffpsII_corr Efficiency photosystem II, corrected data EffpsII Efficiency photosystem II, raw data genotype Genotypes repId Block define sowing post-blocking. Image_pos Position camera check Status genotypes: check reference genotypes, noCheck others. colId Column coordinate rowId Row coordinate plotId Unique pot ID using rowcol coordinates","code":""},{"path":"/reference/spatPredArch.html","id":null,"dir":"Reference","previous_headings":"","what":"Maize data, genotypic predictions. — spatPredArch","title":"Maize data, genotypic predictions. — spatPredArch","text":"dataset contains genotypic predictions obtained (1) removing outliers single observations (2) running spatial model PhenoarchDat1 dataset. See vignettes details.","code":""},{"path":"/reference/spatPredArch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maize data, genotypic predictions. — spatPredArch","text":"","code":"spatPredArch"},{"path":"/reference/spatPredArch.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Maize data, genotypic predictions. — spatPredArch","text":"data.frame 6,120 rows 6 columns: timeNumber Time number obtained formatting original dataset function createTP. timePoint Original time point. geno.decomp Combination treatment levels decompose genotypic variance (see vignettes) genotype Genotypes predicted.values Biomass, predicted values standard.errors Standard errors associated prediction","code":""},{"path":"/reference/statgenHTP-package.html","id":null,"dir":"Reference","previous_headings":"","what":"statgenHTP: High Throughput Phenotyping (HTP) Data Analysis — statgenHTP-package","title":"statgenHTP: High Throughput Phenotyping (HTP) Data Analysis — statgenHTP-package","text":"Phenotypic analysis data coming high throughput phenotyping (HTP) platforms, including different types outlier detection, spatial analysis, parameter estimation. package developed within EPPN2020 project (https://eppn2020.plant-phenotyping.eu/). functions created used conjunction R package 'asreml' 'ASReml' software, can obtained upon purchase 'VSN' international (https://vsni.co.uk/software/asreml-r/).","code":""},{"path":[]},{"path":"/reference/statgenHTP-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"statgenHTP: High Throughput Phenotyping (HTP) Data Analysis — statgenHTP-package","text":"Maintainer: Bart-Jan van Rossum bart-jan.vanrossum@wur.nl (ORCID) Authors: Emilie J Millet emilie.millet@wur.nl (ORCID) Maria Xose Rodriguez Alvarez (ORCID) Diana Marcela Perez Valencia (ORCID) Isabelle Sanchez Nadine Hilgert Fred van Eeuwijk (ORCID) Martin Boer","code":""},{"path":"/reference/summary.TP.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for TP objects — summary.TP","title":"Summary function for TP objects — summary.TP","text":"Function creating short summary contents TP object. summary consists name experiment, number time points, first last time point genotypes defined checks.","code":""},{"path":"/reference/summary.TP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for TP objects — summary.TP","text":"","code":"# S3 method for class 'TP' summary(object, ...)"},{"path":"/reference/summary.TP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for TP objects — summary.TP","text":"object object class TP. ... Ignored.","code":""},{"path":"/reference/summary.TP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary function for TP objects — summary.TP","text":"return value, summary printed.","code":""},{"path":[]},{"path":"/reference/summary.TP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for TP objects — summary.TP","text":"","code":"## Create a TP object containing the data from the Phenovator. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\",\"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49 ## Create a summary. summary(phenoTP) #> phenoTP contains data for experiment Phenovator. #>  #> It contains 73 time points. #> First time point: 2018-05-31 16:37:00  #> Last time point: 2018-06-18 16:37:00  #>  #> The following genotypes are defined as check genotypes: check1, check2, check3, check4."},{"path":"/reference/summary.fitMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for fitMod objects — summary.fitMod","title":"Summary function for fitMod objects — summary.fitMod","text":"Function creating short summary contents TP object. summary consists name experiment, number time points, engine used fit models , case spatial models fitted using asreml, selected spatial model.","code":""},{"path":"/reference/summary.fitMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for fitMod objects — summary.fitMod","text":"","code":"# S3 method for class 'fitMod' summary(object, ...)"},{"path":"/reference/summary.fitMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for fitMod objects — summary.fitMod","text":"object object class fitMod. ... Ignored.","code":""},{"path":"/reference/summary.fitMod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary function for fitMod objects — summary.fitMod","text":"return value, summary printed.","code":""},{"path":[]},{"path":"/reference/summary.fitMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for fitMod objects — summary.fitMod","text":"","code":"# \\donttest{ ## Using the first example dataset (PhenovatorDat1): ## Create an object of class TP. phenoTP <- createTimePoints(dat = PhenovatorDat1,                             experimentName = \"Phenovator\",                             genotype = \"Genotype\",                             timePoint = \"timepoints\",                             repId = \"Replicate\",                             plotId = \"pos\",                             rowNum = \"y\", colNum = \"x\",                             addCheck = TRUE,                             checkGenotypes = c(\"check1\", \"check2\",                                                \"check3\", \"check4\")) #> Warning: The following plotIds have observations for less than 50% of the time points: #> c24r41, c7r18, c7r49  ## Fit a SpATS model on few time points: modPhenoSp <- fitModels(TP = phenoTP,                         trait = \"EffpsII\",                         timePoints = c(1, 6, 36)) #> 2018-05-31 16:37:00 #> 2018-06-02 09:07:00 #> 2018-06-09 14:37:00  ## Create a summary. summary(modPhenoSp) #> Models in modPhenoSp where fitted for experiment Phenovator. #>  #> It contains 3 time points. #> The models were fitted using SpATS. #>  # }"},{"path":"/news/index.html","id":"statgenhtp-108","dir":"Changelog","previous_headings":"","what":"statgenHTP 1.0.8","title":"statgenHTP 1.0.8","text":"small bug helper function fitSplineHDM() fixed. Impact results minimal. Several improvements documentation examples.","code":""},{"path":"/news/index.html","id":"statgenhtp-107","dir":"Changelog","previous_headings":"","what":"statgenHTP 1.0.7","title":"statgenHTP 1.0.7","text":"CRAN release: 2024-10-14 spatial models fitted SpATS now assured number segments used rows columns divisible value nest.div used. done accommodate minor fix upcoming release SpATS. Functions longer rely soft-deprecated ggplot2 functions.","code":""},{"path":"/news/index.html","id":"statgenhtp-106","dir":"Changelog","previous_headings":"","what":"statgenHTP 1.0.6","title":"statgenHTP 1.0.6","text":"CRAN release: 2022-12-13 package extended functions modelling evolution genetic signal. extension consists functions fitSplineHDM() fitting hierarchical data model, predict.psHDM() making predictions based model, plot.psHDM() plotting results. methods used described new vignette. small bug detectSingleOutMaize() fixed. Observations missing value one involved traits longer tagged outliers.","code":""},{"path":"/news/index.html","id":"statgenhtp-105","dir":"Changelog","previous_headings":"","what":"statgenHTP 1.0.5","title":"statgenHTP 1.0.5","text":"CRAN release: 2021-09-15 user visible changes","code":""},{"path":"/news/index.html","id":"statgenhtp-104","dir":"Changelog","previous_headings":"","what":"statgenHTP 1.0.4","title":"statgenHTP 1.0.4","text":"CRAN release: 2021-08-20 removeSerieOut() function now extra argument reason allowing restricting removal outliers one reason outliers tagged. plot function serieOut objects now extra argument reason allowing restricting plotting outliers one reason outliers tagged. detectSerieOut() function now able handle plotIds irregular naming, .e. plotIds starting number. results estimateSplineParameters() can now plotted box plot histogram. estimateSplineParameters() function multiple parameters can now estimated . bug detectSerieOut() caused slope outliers never detected fixed. bug causing predictions made fitSpline() missing values beginning end time course fixed. detectSerieOut() function now checks number plotIds per plant correct location leading user friendly error message.","code":""},{"path":"/news/index.html","id":"statgenhtp-103","dir":"Changelog","previous_headings":"","what":"statgenHTP 1.0.3","title":"statgenHTP 1.0.3","text":"CRAN release: 2021-06-18 user visible changes","code":""},{"path":"/news/index.html","id":"statgenhtp-102","dir":"Changelog","previous_headings":"","what":"statgenHTP 1.0.2","title":"statgenHTP 1.0.2","text":"CRAN release: 2021-06-10 Plotting second derivatives fitted splines, plotted first derivatives. fixed now. detectSerieOut() function now uses extra criterion checking time courses outlying. See function documentation vignettes full explanation new criterion. parameter trait removeSerieOut() function renamed traits now accepts vector traits outlier values can replaced NA. Plotting output detectSerieOut() now extra parameter geno.decomp restrict output selected levels geno.decomp variable data. Computing area curve estimateSplineParameters() now allows specification time unit used x-axis. Fitting models using SpATS now done using option centered = TRUE default.","code":""},{"path":"/news/index.html","id":"statgenhtp-101","dir":"Changelog","previous_headings":"","what":"statgenHTP 1.0.1","title":"statgenHTP 1.0.1","text":"CRAN release: 2021-03-09 user visible changes","code":""},{"path":"/news/index.html","id":"statgenhtp-100","dir":"Changelog","previous_headings":"","what":"statgenHTP 1.0.0","title":"statgenHTP 1.0.0","text":"CRAN release: 2021-03-05 Initial CRAN Release","code":""}]
